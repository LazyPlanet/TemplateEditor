// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Share_Common.proto

#ifndef PROTOBUF_Share_5fCommon_2eproto__INCLUDED
#define PROTOBUF_Share_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Share_Common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Share_5fCommon_2eproto();
void protobuf_AssignDesc_Share_5fCommon_2eproto();
void protobuf_ShutdownFile_Share_5fCommon_2eproto();

class Stuff_Vector3;
class Stuff_Message;
class Stuff_Message_Queue;
class Stuff_Item;
class Stuff_Inventory;
class Plant_Config;
class Stuff_Account;
class Stuff_GetPlayer;
class Stuff_Login;
class Stuff_Player;
class Stuff_Players;
class Stuff_Limit;
class Stuff_Creatures;
class Stuff_Creature;
class Common_Property;
class Item_Medichine;
class Item_Mine;
class Config_Path;
class Config_Common_Limit;

enum Stuff_Message_MC_Type {
  Stuff_Message_MC_Type_MC_EnterScene = 1
};
bool Stuff_Message_MC_Type_IsValid(int value);
const Stuff_Message_MC_Type Stuff_Message_MC_Type_MC_Type_MIN = Stuff_Message_MC_Type_MC_EnterScene;
const Stuff_Message_MC_Type Stuff_Message_MC_Type_MC_Type_MAX = Stuff_Message_MC_Type_MC_EnterScene;
const int Stuff_Message_MC_Type_MC_Type_ARRAYSIZE = Stuff_Message_MC_Type_MC_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Stuff_Message_MC_Type_descriptor();
inline const ::std::string& Stuff_Message_MC_Type_Name(Stuff_Message_MC_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Stuff_Message_MC_Type_descriptor(), value);
}
inline bool Stuff_Message_MC_Type_Parse(
    const ::std::string& name, Stuff_Message_MC_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Stuff_Message_MC_Type>(
    Stuff_Message_MC_Type_descriptor(), name, value);
}
enum Creature_Variety {
  CV_Null = 1,
  CV_Player = 2,
  CV_NPC = 3
};
bool Creature_Variety_IsValid(int value);
const Creature_Variety Creature_Variety_MIN = CV_Null;
const Creature_Variety Creature_Variety_MAX = CV_NPC;
const int Creature_Variety_ARRAYSIZE = Creature_Variety_MAX + 1;

const ::google::protobuf::EnumDescriptor* Creature_Variety_descriptor();
inline const ::std::string& Creature_Variety_Name(Creature_Variety value) {
  return ::google::protobuf::internal::NameOfEnum(
    Creature_Variety_descriptor(), value);
}
inline bool Creature_Variety_Parse(
    const ::std::string& name, Creature_Variety* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Creature_Variety>(
    Creature_Variety_descriptor(), name, value);
}
enum Server_State {
  SS_Starting = 1,
  SS_Started = 2,
  SS_Working = 3,
  SS_Closing = 4,
  SS_Closed = 5
};
bool Server_State_IsValid(int value);
const Server_State Server_State_MIN = SS_Starting;
const Server_State Server_State_MAX = SS_Closed;
const int Server_State_ARRAYSIZE = Server_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Server_State_descriptor();
inline const ::std::string& Server_State_Name(Server_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Server_State_descriptor(), value);
}
inline bool Server_State_Parse(
    const ::std::string& name, Server_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Server_State>(
    Server_State_descriptor(), name, value);
}
enum Version {
  GLOBAL = 1,
  DALU = 2,
  TAIWAN = 3,
  HANGUO = 4,
  DONGNANYA = 5
};
bool Version_IsValid(int value);
const Version Version_MIN = GLOBAL;
const Version Version_MAX = DONGNANYA;
const int Version_ARRAYSIZE = Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Version_descriptor();
inline const ::std::string& Version_Name(Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Version_descriptor(), value);
}
inline bool Version_Parse(
    const ::std::string& name, Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
enum C2S_Proto_Type {
  Proto_Stuff_Client_Begin = 1,
  Proto_Stuff_Account = 2,
  Proto_Stuff_GetPlayer = 3,
  Proto_Stuff_Login = 4
};
bool C2S_Proto_Type_IsValid(int value);
const C2S_Proto_Type C2S_Proto_Type_MIN = Proto_Stuff_Client_Begin;
const C2S_Proto_Type C2S_Proto_Type_MAX = Proto_Stuff_Login;
const int C2S_Proto_Type_ARRAYSIZE = C2S_Proto_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2S_Proto_Type_descriptor();
inline const ::std::string& C2S_Proto_Type_Name(C2S_Proto_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2S_Proto_Type_descriptor(), value);
}
inline bool C2S_Proto_Type_Parse(
    const ::std::string& name, C2S_Proto_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2S_Proto_Type>(
    C2S_Proto_Type_descriptor(), name, value);
}
enum S2C_Proto_Type {
  Proto_Stuff_Server_Begin = 1,
  Proto_Stuff_Player = 2,
  Proto_Stuff_Players = 3
};
bool S2C_Proto_Type_IsValid(int value);
const S2C_Proto_Type S2C_Proto_Type_MIN = Proto_Stuff_Server_Begin;
const S2C_Proto_Type S2C_Proto_Type_MAX = Proto_Stuff_Players;
const int S2C_Proto_Type_ARRAYSIZE = S2C_Proto_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2C_Proto_Type_descriptor();
inline const ::std::string& S2C_Proto_Type_Name(S2C_Proto_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2C_Proto_Type_descriptor(), value);
}
inline bool S2C_Proto_Type_Parse(
    const ::std::string& name, S2C_Proto_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2C_Proto_Type>(
    S2C_Proto_Type_descriptor(), name, value);
}
enum Item_Type {
  Data_Item_Medichine = 1,
  Data_Item_Mine = 2
};
bool Item_Type_IsValid(int value);
const Item_Type Item_Type_MIN = Data_Item_Medichine;
const Item_Type Item_Type_MAX = Data_Item_Mine;
const int Item_Type_ARRAYSIZE = Item_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Item_Type_descriptor();
inline const ::std::string& Item_Type_Name(Item_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Item_Type_descriptor(), value);
}
inline bool Item_Type_Parse(
    const ::std::string& name, Item_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Item_Type>(
    Item_Type_descriptor(), name, value);
}
enum Clear_Time {
  Year = 1,
  Month = 2,
  Day = 3,
  Hour = 4
};
bool Clear_Time_IsValid(int value);
const Clear_Time Clear_Time_MIN = Year;
const Clear_Time Clear_Time_MAX = Hour;
const int Clear_Time_ARRAYSIZE = Clear_Time_MAX + 1;

const ::google::protobuf::EnumDescriptor* Clear_Time_descriptor();
inline const ::std::string& Clear_Time_Name(Clear_Time value) {
  return ::google::protobuf::internal::NameOfEnum(
    Clear_Time_descriptor(), value);
}
inline bool Clear_Time_Parse(
    const ::std::string& name, Clear_Time* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Clear_Time>(
    Clear_Time_descriptor(), name, value);
}
// ===================================================================

class Stuff_Vector3 : public ::google::protobuf::Message {
 public:
  Stuff_Vector3();
  virtual ~Stuff_Vector3();

  Stuff_Vector3(const Stuff_Vector3& from);

  inline Stuff_Vector3& operator=(const Stuff_Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Vector3& default_instance();

  void Swap(Stuff_Vector3* other);

  // implements Message ----------------------------------------------

  Stuff_Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Vector3& from);
  void MergeFrom(const Stuff_Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Vector3* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Message : public ::google::protobuf::Message {
 public:
  Stuff_Message();
  virtual ~Stuff_Message();

  Stuff_Message(const Stuff_Message& from);

  inline Stuff_Message& operator=(const Stuff_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Message& default_instance();

  void Swap(Stuff_Message* other);

  // implements Message ----------------------------------------------

  Stuff_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Message& from);
  void MergeFrom(const Stuff_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Stuff_Message_MC_Type MC_Type;
  static const MC_Type MC_EnterScene = Stuff_Message_MC_Type_MC_EnterScene;
  static inline bool MC_Type_IsValid(int value) {
    return Stuff_Message_MC_Type_IsValid(value);
  }
  static const MC_Type MC_Type_MIN =
    Stuff_Message_MC_Type_MC_Type_MIN;
  static const MC_Type MC_Type_MAX =
    Stuff_Message_MC_Type_MC_Type_MAX;
  static const int MC_Type_ARRAYSIZE =
    Stuff_Message_MC_Type_MC_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MC_Type_descriptor() {
    return Stuff_Message_MC_Type_descriptor();
  }
  static inline const ::std::string& MC_Type_Name(MC_Type value) {
    return Stuff_Message_MC_Type_Name(value);
  }
  static inline bool MC_Type_Parse(const ::std::string& name,
      MC_Type* value) {
    return Stuff_Message_MC_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::Stuff_Message_MC_Type type_t() const;
  inline void set_type_t(::Share_Common::Stuff_Message_MC_Type value);

  // optional int32 source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // optional int32 target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // repeated int32 paras = 4;
  inline int paras_size() const;
  inline void clear_paras();
  static const int kParasFieldNumber = 4;
  inline ::google::protobuf::int32 paras(int index) const;
  inline void set_paras(int index, ::google::protobuf::int32 value);
  inline void add_paras(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paras() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paras();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Message)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_t_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paras_;
  ::google::protobuf::int32 target_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Message* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Message_Queue : public ::google::protobuf::Message {
 public:
  Stuff_Message_Queue();
  virtual ~Stuff_Message_Queue();

  Stuff_Message_Queue(const Stuff_Message_Queue& from);

  inline Stuff_Message_Queue& operator=(const Stuff_Message_Queue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Message_Queue& default_instance();

  void Swap(Stuff_Message_Queue* other);

  // implements Message ----------------------------------------------

  Stuff_Message_Queue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Message_Queue& from);
  void MergeFrom(const Stuff_Message_Queue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Share_Common.Stuff_Message contents = 1;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::Share_Common::Stuff_Message& contents(int index) const;
  inline ::Share_Common::Stuff_Message* mutable_contents(int index);
  inline ::Share_Common::Stuff_Message* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Message >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Message >*
      mutable_contents();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Message_Queue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Message > contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Message_Queue* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Item : public ::google::protobuf::Message {
 public:
  Stuff_Item();
  virtual ~Stuff_Item();

  Stuff_Item(const Stuff_Item& from);

  inline Stuff_Item& operator=(const Stuff_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Item& default_instance();

  void Swap(Stuff_Item* other);

  // implements Message ----------------------------------------------

  Stuff_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Item& from);
  void MergeFrom(const Stuff_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional .Share_Common.Item_Type type_t = 2;
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 2;
  inline ::Share_Common::Item_Type type_t() const;
  inline void set_type_t(::Share_Common::Item_Type value);

  // optional bool Bind = 3;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 3;
  inline bool bind() const;
  inline void set_bind(bool value);

  // optional int32 BaseId = 4;
  inline bool has_baseid() const;
  inline void clear_baseid();
  static const int kBaseIdFieldNumber = 4;
  inline ::google::protobuf::int32 baseid() const;
  inline void set_baseid(::google::protobuf::int32 value);

  // optional int32 AddonId = 5;
  inline bool has_addonid() const;
  inline void clear_addonid();
  static const int kAddonIdFieldNumber = 5;
  inline ::google::protobuf::int32 addonid() const;
  inline void set_addonid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Item)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_baseid();
  inline void clear_has_baseid();
  inline void set_has_addonid();
  inline void clear_has_addonid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  int type_t_;
  bool bind_;
  ::google::protobuf::int32 baseid_;
  ::google::protobuf::int32 addonid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Item* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Inventory : public ::google::protobuf::Message {
 public:
  Stuff_Inventory();
  virtual ~Stuff_Inventory();

  Stuff_Inventory(const Stuff_Inventory& from);

  inline Stuff_Inventory& operator=(const Stuff_Inventory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Inventory& default_instance();

  void Swap(Stuff_Inventory* other);

  // implements Message ----------------------------------------------

  Stuff_Inventory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Inventory& from);
  void MergeFrom(const Stuff_Inventory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Share_Common.Stuff_Item Items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Share_Common::Stuff_Item& items(int index) const;
  inline ::Share_Common::Stuff_Item* mutable_items(int index);
  inline ::Share_Common::Stuff_Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Inventory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Inventory* default_instance_;
};
// -------------------------------------------------------------------

class Plant_Config : public ::google::protobuf::Message {
 public:
  Plant_Config();
  virtual ~Plant_Config();

  Plant_Config(const Plant_Config& from);

  inline Plant_Config& operator=(const Plant_Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plant_Config& default_instance();

  void Swap(Plant_Config* other);

  // implements Message ----------------------------------------------

  Plant_Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plant_Config& from);
  void MergeFrom(const Plant_Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_index = 1;
  inline bool has_item_index() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int32 item_index() const;
  inline void set_item_index(::google::protobuf::int32 value);

  // optional string item_name = 2;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const char* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  inline void set_allocated_item_name(::std::string* item_name);

  // optional int32 item_level = 3;
  inline bool has_item_level() const;
  inline void clear_item_level();
  static const int kItemLevelFieldNumber = 3;
  inline ::google::protobuf::int32 item_level() const;
  inline void set_item_level(::google::protobuf::int32 value);

  // optional int32 ripe_time = 4;
  inline bool has_ripe_time() const;
  inline void clear_ripe_time();
  static const int kRipeTimeFieldNumber = 4;
  inline ::google::protobuf::int32 ripe_time() const;
  inline void set_ripe_time(::google::protobuf::int32 value);

  // optional int32 consume_diamonds = 5;
  inline bool has_consume_diamonds() const;
  inline void clear_consume_diamonds();
  static const int kConsumeDiamondsFieldNumber = 5;
  inline ::google::protobuf::int32 consume_diamonds() const;
  inline void set_consume_diamonds(::google::protobuf::int32 value);

  // optional int32 reward_tid = 6;
  inline bool has_reward_tid() const;
  inline void clear_reward_tid();
  static const int kRewardTidFieldNumber = 6;
  inline ::google::protobuf::int32 reward_tid() const;
  inline void set_reward_tid(::google::protobuf::int32 value);

  // optional int32 unlock_level = 7;
  inline bool has_unlock_level() const;
  inline void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 7;
  inline ::google::protobuf::int32 unlock_level() const;
  inline void set_unlock_level(::google::protobuf::int32 value);

  // optional .Share_Common.Version version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::Share_Common::Version version() const;
  inline void set_version(::Share_Common::Version value);

  // @@protoc_insertion_point(class_scope:Share_Common.Plant_Config)
 private:
  inline void set_has_item_index();
  inline void clear_has_item_index();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_item_level();
  inline void clear_has_item_level();
  inline void set_has_ripe_time();
  inline void clear_has_ripe_time();
  inline void set_has_consume_diamonds();
  inline void clear_has_consume_diamonds();
  inline void set_has_reward_tid();
  inline void clear_has_reward_tid();
  inline void set_has_unlock_level();
  inline void clear_has_unlock_level();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* item_name_;
  ::google::protobuf::int32 item_index_;
  ::google::protobuf::int32 item_level_;
  ::google::protobuf::int32 ripe_time_;
  ::google::protobuf::int32 consume_diamonds_;
  ::google::protobuf::int32 reward_tid_;
  ::google::protobuf::int32 unlock_level_;
  int version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Plant_Config* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Account : public ::google::protobuf::Message {
 public:
  Stuff_Account();
  virtual ~Stuff_Account();

  Stuff_Account(const Stuff_Account& from);

  inline Stuff_Account& operator=(const Stuff_Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Account& default_instance();

  void Swap(Stuff_Account* other);

  // implements Message ----------------------------------------------

  Stuff_Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Account& from);
  void MergeFrom(const Stuff_Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::C2S_Proto_Type type_t() const;
  inline void set_type_t(::Share_Common::C2S_Proto_Type value);

  // optional string UserName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string PassWord = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPassWordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Account)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  int type_t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Account* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_GetPlayer : public ::google::protobuf::Message {
 public:
  Stuff_GetPlayer();
  virtual ~Stuff_GetPlayer();

  Stuff_GetPlayer(const Stuff_GetPlayer& from);

  inline Stuff_GetPlayer& operator=(const Stuff_GetPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_GetPlayer& default_instance();

  void Swap(Stuff_GetPlayer* other);

  // implements Message ----------------------------------------------

  Stuff_GetPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_GetPlayer& from);
  void MergeFrom(const Stuff_GetPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::C2S_Proto_Type type_t() const;
  inline void set_type_t(::Share_Common::C2S_Proto_Type value);

  // optional string UserName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int32 PlayerId = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_GetPlayer)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  int type_t_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_GetPlayer* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Login : public ::google::protobuf::Message {
 public:
  Stuff_Login();
  virtual ~Stuff_Login();

  Stuff_Login(const Stuff_Login& from);

  inline Stuff_Login& operator=(const Stuff_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Login& default_instance();

  void Swap(Stuff_Login* other);

  // implements Message ----------------------------------------------

  Stuff_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Login& from);
  void MergeFrom(const Stuff_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::C2S_Proto_Type type_t() const;
  inline void set_type_t(::Share_Common::C2S_Proto_Type value);

  // optional .Share_Common.Stuff_Account Account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::Share_Common::Stuff_Account& account() const;
  inline ::Share_Common::Stuff_Account* mutable_account();
  inline ::Share_Common::Stuff_Account* release_account();
  inline void set_allocated_account(::Share_Common::Stuff_Account* account);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Login)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Share_Common::Stuff_Account* account_;
  int type_t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Login* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Player : public ::google::protobuf::Message {
 public:
  Stuff_Player();
  virtual ~Stuff_Player();

  Stuff_Player(const Stuff_Player& from);

  inline Stuff_Player& operator=(const Stuff_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Player& default_instance();

  void Swap(Stuff_Player* other);

  // implements Message ----------------------------------------------

  Stuff_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Player& from);
  void MergeFrom(const Stuff_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::S2C_Proto_Type type_t() const;
  inline void set_type_t(::Share_Common::S2C_Proto_Type value);

  // required int32 PlayerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::Share_Common::Stuff_Vector3& position() const;
  inline ::Share_Common::Stuff_Vector3* mutable_position();
  inline ::Share_Common::Stuff_Vector3* release_position();
  inline void set_allocated_position(::Share_Common::Stuff_Vector3* position);

  // optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
  inline bool has_variety() const;
  inline void clear_variety();
  static const int kVarietyFieldNumber = 4;
  inline ::Share_Common::Creature_Variety variety() const;
  inline void set_variety(::Share_Common::Creature_Variety value);

  // optional int32 NationId = 5;
  inline bool has_nationid() const;
  inline void clear_nationid();
  static const int kNationIdFieldNumber = 5;
  inline ::google::protobuf::int32 nationid() const;
  inline void set_nationid(::google::protobuf::int32 value);

  // optional int32 MafiaId = 6;
  inline bool has_mafiaid() const;
  inline void clear_mafiaid();
  static const int kMafiaIdFieldNumber = 6;
  inline ::google::protobuf::int32 mafiaid() const;
  inline void set_mafiaid(::google::protobuf::int32 value);

  // repeated .Share_Common.Stuff_Inventory Inventory = 7;
  inline int inventory_size() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 7;
  inline const ::Share_Common::Stuff_Inventory& inventory(int index) const;
  inline ::Share_Common::Stuff_Inventory* mutable_inventory(int index);
  inline ::Share_Common::Stuff_Inventory* add_inventory();
  inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Inventory >&
      inventory() const;
  inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Inventory >*
      mutable_inventory();

  // repeated .Share_Common.Stuff_Limit Limits = 8;
  inline int limits_size() const;
  inline void clear_limits();
  static const int kLimitsFieldNumber = 8;
  inline const ::Share_Common::Stuff_Limit& limits(int index) const;
  inline ::Share_Common::Stuff_Limit* mutable_limits(int index);
  inline ::Share_Common::Stuff_Limit* add_limits();
  inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Limit >&
      limits() const;
  inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Limit >*
      mutable_limits();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Player)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_variety();
  inline void clear_has_variety();
  inline void set_has_nationid();
  inline void clear_has_nationid();
  inline void set_has_mafiaid();
  inline void clear_has_mafiaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_t_;
  ::google::protobuf::int32 playerid_;
  ::Share_Common::Stuff_Vector3* position_;
  int variety_;
  ::google::protobuf::int32 nationid_;
  ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Inventory > inventory_;
  ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Limit > limits_;
  ::google::protobuf::int32 mafiaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Player* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Players : public ::google::protobuf::Message {
 public:
  Stuff_Players();
  virtual ~Stuff_Players();

  Stuff_Players(const Stuff_Players& from);

  inline Stuff_Players& operator=(const Stuff_Players& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Players& default_instance();

  void Swap(Stuff_Players* other);

  // implements Message ----------------------------------------------

  Stuff_Players* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Players& from);
  void MergeFrom(const Stuff_Players& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::S2C_Proto_Type type_t() const;
  inline void set_type_t(::Share_Common::S2C_Proto_Type value);

  // required string UserName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // repeated int32 Players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline ::google::protobuf::int32 players(int index) const;
  inline void set_players(int index, ::google::protobuf::int32 value);
  inline void add_players(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Players)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > players_;
  int type_t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Players* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Limit : public ::google::protobuf::Message {
 public:
  Stuff_Limit();
  virtual ~Stuff_Limit();

  Stuff_Limit(const Stuff_Limit& from);

  inline Stuff_Limit& operator=(const Stuff_Limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Limit& default_instance();

  void Swap(Stuff_Limit* other);

  // implements Message ----------------------------------------------

  Stuff_Limit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Limit& from);
  void MergeFrom(const Stuff_Limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LimitId = 1;
  inline bool has_limitid() const;
  inline void clear_limitid();
  static const int kLimitIdFieldNumber = 1;
  inline ::google::protobuf::int32 limitid() const;
  inline void set_limitid(::google::protobuf::int32 value);

  // optional int32 StartTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Limit)
 private:
  inline void set_has_limitid();
  inline void clear_has_limitid();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 limitid_;
  ::google::protobuf::int32 starttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Limit* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Creatures : public ::google::protobuf::Message {
 public:
  Stuff_Creatures();
  virtual ~Stuff_Creatures();

  Stuff_Creatures(const Stuff_Creatures& from);

  inline Stuff_Creatures& operator=(const Stuff_Creatures& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Creatures& default_instance();

  void Swap(Stuff_Creatures* other);

  // implements Message ----------------------------------------------

  Stuff_Creatures* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Creatures& from);
  void MergeFrom(const Stuff_Creatures& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Share_Common.Stuff_Creature contents = 1;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::Share_Common::Stuff_Creature& contents(int index) const;
  inline ::Share_Common::Stuff_Creature* mutable_contents(int index);
  inline ::Share_Common::Stuff_Creature* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Creature >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Creature >*
      mutable_contents();

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Creatures)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Creature > contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Creatures* default_instance_;
};
// -------------------------------------------------------------------

class Stuff_Creature : public ::google::protobuf::Message {
 public:
  Stuff_Creature();
  virtual ~Stuff_Creature();

  Stuff_Creature(const Stuff_Creature& from);

  inline Stuff_Creature& operator=(const Stuff_Creature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stuff_Creature& default_instance();

  void Swap(Stuff_Creature* other);

  // implements Message ----------------------------------------------

  Stuff_Creature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stuff_Creature& from);
  void MergeFrom(const Stuff_Creature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CreatureId = 1;
  inline bool has_creatureid() const;
  inline void clear_creatureid();
  static const int kCreatureIdFieldNumber = 1;
  inline ::google::protobuf::int32 creatureid() const;
  inline void set_creatureid(::google::protobuf::int32 value);

  // optional .Share_Common.Creature_Variety Variety = 2;
  inline bool has_variety() const;
  inline void clear_variety();
  static const int kVarietyFieldNumber = 2;
  inline ::Share_Common::Creature_Variety variety() const;
  inline void set_variety(::Share_Common::Creature_Variety value);

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::Share_Common::Stuff_Vector3& position() const;
  inline ::Share_Common::Stuff_Vector3* mutable_position();
  inline ::Share_Common::Stuff_Vector3* release_position();
  inline void set_allocated_position(::Share_Common::Stuff_Vector3* position);

  // @@protoc_insertion_point(class_scope:Share_Common.Stuff_Creature)
 private:
  inline void set_has_creatureid();
  inline void clear_has_creatureid();
  inline void set_has_variety();
  inline void clear_has_variety();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 creatureid_;
  int variety_;
  ::Share_Common::Stuff_Vector3* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Stuff_Creature* default_instance_;
};
// -------------------------------------------------------------------

class Common_Property : public ::google::protobuf::Message {
 public:
  Common_Property();
  virtual ~Common_Property();

  Common_Property(const Common_Property& from);

  inline Common_Property& operator=(const Common_Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Common_Property& default_instance();

  void Swap(Common_Property* other);

  // implements Message ----------------------------------------------

  Common_Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Common_Property& from);
  void MergeFrom(const Common_Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TId = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 cool_time = 3;
  inline bool has_cool_time() const;
  inline void clear_cool_time();
  static const int kCoolTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 cool_time() const;
  inline void set_cool_time(::google::protobuf::uint32 value);

  // optional uint32 cool_type = 4;
  inline bool has_cool_type() const;
  inline void clear_cool_type();
  static const int kCoolTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 cool_type() const;
  inline void set_cool_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Common_Property)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cool_time();
  inline void clear_has_cool_time();
  inline void set_has_cool_type();
  inline void clear_has_cool_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 cool_time_;
  ::google::protobuf::uint32 cool_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Common_Property* default_instance_;
};
// -------------------------------------------------------------------

class Item_Medichine : public ::google::protobuf::Message {
 public:
  Item_Medichine();
  virtual ~Item_Medichine();

  Item_Medichine(const Item_Medichine& from);

  inline Item_Medichine& operator=(const Item_Medichine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item_Medichine& default_instance();

  void Swap(Item_Medichine* other);

  // implements Message ----------------------------------------------

  Item_Medichine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item_Medichine& from);
  void MergeFrom(const Item_Medichine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::Item_Type type_t() const;
  inline void set_type_t(::Share_Common::Item_Type value);

  // optional .Share_Common.Common_Property comm = 2;
  inline bool has_comm() const;
  inline void clear_comm();
  static const int kCommFieldNumber = 2;
  inline const ::Share_Common::Common_Property& comm() const;
  inline ::Share_Common::Common_Property* mutable_comm();
  inline ::Share_Common::Common_Property* release_comm();
  inline void set_allocated_comm(::Share_Common::Common_Property* comm);

  // optional int32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Item_Medichine)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_comm();
  inline void clear_has_comm();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Share_Common::Common_Property* comm_;
  int type_t_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Item_Medichine* default_instance_;
};
// -------------------------------------------------------------------

class Item_Mine : public ::google::protobuf::Message {
 public:
  Item_Mine();
  virtual ~Item_Mine();

  Item_Mine(const Item_Mine& from);

  inline Item_Mine& operator=(const Item_Mine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item_Mine& default_instance();

  void Swap(Item_Mine* other);

  // implements Message ----------------------------------------------

  Item_Mine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item_Mine& from);
  void MergeFrom(const Item_Mine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Share_Common::Item_Type type_t() const;
  inline void set_type_t(::Share_Common::Item_Type value);

  // optional int32 mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated int32 awards = 4;
  inline int awards_size() const;
  inline void clear_awards();
  static const int kAwardsFieldNumber = 4;
  inline ::google::protobuf::int32 awards(int index) const;
  inline void set_awards(int index, ::google::protobuf::int32 value);
  inline void add_awards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      awards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_awards();

  // @@protoc_insertion_point(class_scope:Share_Common.Item_Mine)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_t_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > awards_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Item_Mine* default_instance_;
};
// -------------------------------------------------------------------

class Config_Path : public ::google::protobuf::Message {
 public:
  Config_Path();
  virtual ~Config_Path();

  Config_Path(const Config_Path& from);

  inline Config_Path& operator=(const Config_Path& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Path& default_instance();

  void Swap(Config_Path* other);

  // implements Message ----------------------------------------------

  Config_Path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config_Path& from);
  void MergeFrom(const Config_Path& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string svn_path = 2;
  inline bool has_svn_path() const;
  inline void clear_svn_path();
  static const int kSvnPathFieldNumber = 2;
  inline const ::std::string& svn_path() const;
  inline void set_svn_path(const ::std::string& value);
  inline void set_svn_path(const char* value);
  inline void set_svn_path(const char* value, size_t size);
  inline ::std::string* mutable_svn_path();
  inline ::std::string* release_svn_path();
  inline void set_allocated_svn_path(::std::string* svn_path);

  // @@protoc_insertion_point(class_scope:Share_Common.Config_Path)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_svn_path();
  inline void clear_has_svn_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::std::string* svn_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Config_Path* default_instance_;
};
// -------------------------------------------------------------------

class Config_Common_Limit : public ::google::protobuf::Message {
 public:
  Config_Common_Limit();
  virtual ~Config_Common_Limit();

  Config_Common_Limit(const Config_Common_Limit& from);

  inline Config_Common_Limit& operator=(const Config_Common_Limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Common_Limit& default_instance();

  void Swap(Config_Common_Limit* other);

  // implements Message ----------------------------------------------

  Config_Common_Limit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config_Common_Limit& from);
  void MergeFrom(const Config_Common_Limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TId = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTIdFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional .Share_Common.Clear_Time Clear_Type = 2;
  inline bool has_clear_type() const;
  inline void clear_clear_type();
  static const int kClearTypeFieldNumber = 2;
  inline ::Share_Common::Clear_Time clear_type() const;
  inline void set_clear_type(::Share_Common::Clear_Time value);

  // optional int32 LimitTimes = 3;
  inline bool has_limittimes() const;
  inline void clear_limittimes();
  static const int kLimitTimesFieldNumber = 3;
  inline ::google::protobuf::int32 limittimes() const;
  inline void set_limittimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Share_Common.Config_Common_Limit)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_clear_type();
  inline void clear_has_clear_type();
  inline void set_has_limittimes();
  inline void clear_has_limittimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tid_;
  int clear_type_;
  ::google::protobuf::int32 limittimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Share_5fCommon_2eproto();
  friend void protobuf_AssignDesc_Share_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_Share_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static Config_Common_Limit* default_instance_;
};
// ===================================================================


// ===================================================================

// Stuff_Vector3

// optional float x = 1;
inline bool Stuff_Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Stuff_Vector3::x() const {
  return x_;
}
inline void Stuff_Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Stuff_Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Stuff_Vector3::y() const {
  return y_;
}
inline void Stuff_Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Stuff_Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Stuff_Vector3::z() const {
  return z_;
}
inline void Stuff_Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Stuff_Message

// optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
inline bool Stuff_Message::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Message::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Message::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Message::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::Share_Common::Stuff_Message_MC_Type Stuff_Message::type_t() const {
  return static_cast< ::Share_Common::Stuff_Message_MC_Type >(type_t_);
}
inline void Stuff_Message::set_type_t(::Share_Common::Stuff_Message_MC_Type value) {
  assert(::Share_Common::Stuff_Message_MC_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional int32 source = 2;
inline bool Stuff_Message::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Message::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Message::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Message::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 Stuff_Message::source() const {
  return source_;
}
inline void Stuff_Message::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
}

// optional int32 target = 3;
inline bool Stuff_Message::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Message::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Message::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Message::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 Stuff_Message::target() const {
  return target_;
}
inline void Stuff_Message::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// repeated int32 paras = 4;
inline int Stuff_Message::paras_size() const {
  return paras_.size();
}
inline void Stuff_Message::clear_paras() {
  paras_.Clear();
}
inline ::google::protobuf::int32 Stuff_Message::paras(int index) const {
  return paras_.Get(index);
}
inline void Stuff_Message::set_paras(int index, ::google::protobuf::int32 value) {
  paras_.Set(index, value);
}
inline void Stuff_Message::add_paras(::google::protobuf::int32 value) {
  paras_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Stuff_Message::paras() const {
  return paras_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Stuff_Message::mutable_paras() {
  return &paras_;
}

// -------------------------------------------------------------------

// Stuff_Message_Queue

// repeated .Share_Common.Stuff_Message contents = 1;
inline int Stuff_Message_Queue::contents_size() const {
  return contents_.size();
}
inline void Stuff_Message_Queue::clear_contents() {
  contents_.Clear();
}
inline const ::Share_Common::Stuff_Message& Stuff_Message_Queue::contents(int index) const {
  return contents_.Get(index);
}
inline ::Share_Common::Stuff_Message* Stuff_Message_Queue::mutable_contents(int index) {
  return contents_.Mutable(index);
}
inline ::Share_Common::Stuff_Message* Stuff_Message_Queue::add_contents() {
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Message >&
Stuff_Message_Queue::contents() const {
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Message >*
Stuff_Message_Queue::mutable_contents() {
  return &contents_;
}

// -------------------------------------------------------------------

// Stuff_Item

// required int32 ItemId = 1;
inline bool Stuff_Item::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Item::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Item::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Item::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 Stuff_Item::itemid() const {
  return itemid_;
}
inline void Stuff_Item::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional .Share_Common.Item_Type type_t = 2;
inline bool Stuff_Item::has_type_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Item::set_has_type_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Item::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Item::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::Share_Common::Item_Type Stuff_Item::type_t() const {
  return static_cast< ::Share_Common::Item_Type >(type_t_);
}
inline void Stuff_Item::set_type_t(::Share_Common::Item_Type value) {
  assert(::Share_Common::Item_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional bool Bind = 3;
inline bool Stuff_Item::has_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Item::set_has_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Item::clear_has_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Item::clear_bind() {
  bind_ = false;
  clear_has_bind();
}
inline bool Stuff_Item::bind() const {
  return bind_;
}
inline void Stuff_Item::set_bind(bool value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 BaseId = 4;
inline bool Stuff_Item::has_baseid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stuff_Item::set_has_baseid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stuff_Item::clear_has_baseid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stuff_Item::clear_baseid() {
  baseid_ = 0;
  clear_has_baseid();
}
inline ::google::protobuf::int32 Stuff_Item::baseid() const {
  return baseid_;
}
inline void Stuff_Item::set_baseid(::google::protobuf::int32 value) {
  set_has_baseid();
  baseid_ = value;
}

// optional int32 AddonId = 5;
inline bool Stuff_Item::has_addonid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stuff_Item::set_has_addonid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stuff_Item::clear_has_addonid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stuff_Item::clear_addonid() {
  addonid_ = 0;
  clear_has_addonid();
}
inline ::google::protobuf::int32 Stuff_Item::addonid() const {
  return addonid_;
}
inline void Stuff_Item::set_addonid(::google::protobuf::int32 value) {
  set_has_addonid();
  addonid_ = value;
}

// -------------------------------------------------------------------

// Stuff_Inventory

// repeated .Share_Common.Stuff_Item Items = 1;
inline int Stuff_Inventory::items_size() const {
  return items_.size();
}
inline void Stuff_Inventory::clear_items() {
  items_.Clear();
}
inline const ::Share_Common::Stuff_Item& Stuff_Inventory::items(int index) const {
  return items_.Get(index);
}
inline ::Share_Common::Stuff_Item* Stuff_Inventory::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Share_Common::Stuff_Item* Stuff_Inventory::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Item >&
Stuff_Inventory::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Item >*
Stuff_Inventory::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// Plant_Config

// optional int32 item_index = 1;
inline bool Plant_Config::has_item_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Plant_Config::set_has_item_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Plant_Config::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Plant_Config::clear_item_index() {
  item_index_ = 0;
  clear_has_item_index();
}
inline ::google::protobuf::int32 Plant_Config::item_index() const {
  return item_index_;
}
inline void Plant_Config::set_item_index(::google::protobuf::int32 value) {
  set_has_item_index();
  item_index_ = value;
}

// optional string item_name = 2;
inline bool Plant_Config::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Plant_Config::set_has_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Plant_Config::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Plant_Config::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& Plant_Config::item_name() const {
  return *item_name_;
}
inline void Plant_Config::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void Plant_Config::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void Plant_Config::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Plant_Config::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  return item_name_;
}
inline ::std::string* Plant_Config::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Plant_Config::set_allocated_item_name(::std::string* item_name) {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (item_name) {
    set_has_item_name();
    item_name_ = item_name;
  } else {
    clear_has_item_name();
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 item_level = 3;
inline bool Plant_Config::has_item_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Plant_Config::set_has_item_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Plant_Config::clear_has_item_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Plant_Config::clear_item_level() {
  item_level_ = 0;
  clear_has_item_level();
}
inline ::google::protobuf::int32 Plant_Config::item_level() const {
  return item_level_;
}
inline void Plant_Config::set_item_level(::google::protobuf::int32 value) {
  set_has_item_level();
  item_level_ = value;
}

// optional int32 ripe_time = 4;
inline bool Plant_Config::has_ripe_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Plant_Config::set_has_ripe_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Plant_Config::clear_has_ripe_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Plant_Config::clear_ripe_time() {
  ripe_time_ = 0;
  clear_has_ripe_time();
}
inline ::google::protobuf::int32 Plant_Config::ripe_time() const {
  return ripe_time_;
}
inline void Plant_Config::set_ripe_time(::google::protobuf::int32 value) {
  set_has_ripe_time();
  ripe_time_ = value;
}

// optional int32 consume_diamonds = 5;
inline bool Plant_Config::has_consume_diamonds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Plant_Config::set_has_consume_diamonds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Plant_Config::clear_has_consume_diamonds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Plant_Config::clear_consume_diamonds() {
  consume_diamonds_ = 0;
  clear_has_consume_diamonds();
}
inline ::google::protobuf::int32 Plant_Config::consume_diamonds() const {
  return consume_diamonds_;
}
inline void Plant_Config::set_consume_diamonds(::google::protobuf::int32 value) {
  set_has_consume_diamonds();
  consume_diamonds_ = value;
}

// optional int32 reward_tid = 6;
inline bool Plant_Config::has_reward_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Plant_Config::set_has_reward_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Plant_Config::clear_has_reward_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Plant_Config::clear_reward_tid() {
  reward_tid_ = 0;
  clear_has_reward_tid();
}
inline ::google::protobuf::int32 Plant_Config::reward_tid() const {
  return reward_tid_;
}
inline void Plant_Config::set_reward_tid(::google::protobuf::int32 value) {
  set_has_reward_tid();
  reward_tid_ = value;
}

// optional int32 unlock_level = 7;
inline bool Plant_Config::has_unlock_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Plant_Config::set_has_unlock_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Plant_Config::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Plant_Config::clear_unlock_level() {
  unlock_level_ = 0;
  clear_has_unlock_level();
}
inline ::google::protobuf::int32 Plant_Config::unlock_level() const {
  return unlock_level_;
}
inline void Plant_Config::set_unlock_level(::google::protobuf::int32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
}

// optional .Share_Common.Version version = 8;
inline bool Plant_Config::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Plant_Config::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Plant_Config::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Plant_Config::clear_version() {
  version_ = 1;
  clear_has_version();
}
inline ::Share_Common::Version Plant_Config::version() const {
  return static_cast< ::Share_Common::Version >(version_);
}
inline void Plant_Config::set_version(::Share_Common::Version value) {
  assert(::Share_Common::Version_IsValid(value));
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// Stuff_Account

// optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
inline bool Stuff_Account::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Account::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Account::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Account::clear_type_t() {
  type_t_ = 2;
  clear_has_type_t();
}
inline ::Share_Common::C2S_Proto_Type Stuff_Account::type_t() const {
  return static_cast< ::Share_Common::C2S_Proto_Type >(type_t_);
}
inline void Stuff_Account::set_type_t(::Share_Common::C2S_Proto_Type value) {
  assert(::Share_Common::C2S_Proto_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional string UserName = 2;
inline bool Stuff_Account::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Account::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Account::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Account::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Stuff_Account::username() const {
  return *username_;
}
inline void Stuff_Account::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_Account::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_Account::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stuff_Account::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Stuff_Account::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stuff_Account::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PassWord = 3;
inline bool Stuff_Account::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Account::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Account::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Account::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Stuff_Account::password() const {
  return *password_;
}
inline void Stuff_Account::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Stuff_Account::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Stuff_Account::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stuff_Account::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Stuff_Account::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stuff_Account::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Stuff_GetPlayer

// optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
inline bool Stuff_GetPlayer::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_GetPlayer::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_GetPlayer::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_GetPlayer::clear_type_t() {
  type_t_ = 3;
  clear_has_type_t();
}
inline ::Share_Common::C2S_Proto_Type Stuff_GetPlayer::type_t() const {
  return static_cast< ::Share_Common::C2S_Proto_Type >(type_t_);
}
inline void Stuff_GetPlayer::set_type_t(::Share_Common::C2S_Proto_Type value) {
  assert(::Share_Common::C2S_Proto_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional string UserName = 2;
inline bool Stuff_GetPlayer::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_GetPlayer::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_GetPlayer::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_GetPlayer::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Stuff_GetPlayer::username() const {
  return *username_;
}
inline void Stuff_GetPlayer::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_GetPlayer::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_GetPlayer::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stuff_GetPlayer::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Stuff_GetPlayer::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stuff_GetPlayer::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 PlayerId = 3;
inline bool Stuff_GetPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_GetPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_GetPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_GetPlayer::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 Stuff_GetPlayer::playerid() const {
  return playerid_;
}
inline void Stuff_GetPlayer::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// Stuff_Login

// optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
inline bool Stuff_Login::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Login::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Login::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Login::clear_type_t() {
  type_t_ = 4;
  clear_has_type_t();
}
inline ::Share_Common::C2S_Proto_Type Stuff_Login::type_t() const {
  return static_cast< ::Share_Common::C2S_Proto_Type >(type_t_);
}
inline void Stuff_Login::set_type_t(::Share_Common::C2S_Proto_Type value) {
  assert(::Share_Common::C2S_Proto_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional .Share_Common.Stuff_Account Account = 2;
inline bool Stuff_Login::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Login::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Login::clear_account() {
  if (account_ != NULL) account_->::Share_Common::Stuff_Account::Clear();
  clear_has_account();
}
inline const ::Share_Common::Stuff_Account& Stuff_Login::account() const {
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::Share_Common::Stuff_Account* Stuff_Login::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::Share_Common::Stuff_Account;
  return account_;
}
inline ::Share_Common::Stuff_Account* Stuff_Login::release_account() {
  clear_has_account();
  ::Share_Common::Stuff_Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline void Stuff_Login::set_allocated_account(::Share_Common::Stuff_Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
}

// -------------------------------------------------------------------

// Stuff_Player

// optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
inline bool Stuff_Player::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Player::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Player::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Player::clear_type_t() {
  type_t_ = 2;
  clear_has_type_t();
}
inline ::Share_Common::S2C_Proto_Type Stuff_Player::type_t() const {
  return static_cast< ::Share_Common::S2C_Proto_Type >(type_t_);
}
inline void Stuff_Player::set_type_t(::Share_Common::S2C_Proto_Type value) {
  assert(::Share_Common::S2C_Proto_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// required int32 PlayerId = 2;
inline bool Stuff_Player::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Player::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Player::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Player::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 Stuff_Player::playerid() const {
  return playerid_;
}
inline void Stuff_Player::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .Share_Common.Stuff_Vector3 Position = 3;
inline bool Stuff_Player::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Player::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Player::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Player::clear_position() {
  if (position_ != NULL) position_->::Share_Common::Stuff_Vector3::Clear();
  clear_has_position();
}
inline const ::Share_Common::Stuff_Vector3& Stuff_Player::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Share_Common::Stuff_Vector3* Stuff_Player::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Share_Common::Stuff_Vector3;
  return position_;
}
inline ::Share_Common::Stuff_Vector3* Stuff_Player::release_position() {
  clear_has_position();
  ::Share_Common::Stuff_Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Stuff_Player::set_allocated_position(::Share_Common::Stuff_Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
inline bool Stuff_Player::has_variety() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stuff_Player::set_has_variety() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stuff_Player::clear_has_variety() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stuff_Player::clear_variety() {
  variety_ = 2;
  clear_has_variety();
}
inline ::Share_Common::Creature_Variety Stuff_Player::variety() const {
  return static_cast< ::Share_Common::Creature_Variety >(variety_);
}
inline void Stuff_Player::set_variety(::Share_Common::Creature_Variety value) {
  assert(::Share_Common::Creature_Variety_IsValid(value));
  set_has_variety();
  variety_ = value;
}

// optional int32 NationId = 5;
inline bool Stuff_Player::has_nationid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stuff_Player::set_has_nationid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stuff_Player::clear_has_nationid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stuff_Player::clear_nationid() {
  nationid_ = 0;
  clear_has_nationid();
}
inline ::google::protobuf::int32 Stuff_Player::nationid() const {
  return nationid_;
}
inline void Stuff_Player::set_nationid(::google::protobuf::int32 value) {
  set_has_nationid();
  nationid_ = value;
}

// optional int32 MafiaId = 6;
inline bool Stuff_Player::has_mafiaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stuff_Player::set_has_mafiaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stuff_Player::clear_has_mafiaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stuff_Player::clear_mafiaid() {
  mafiaid_ = 0;
  clear_has_mafiaid();
}
inline ::google::protobuf::int32 Stuff_Player::mafiaid() const {
  return mafiaid_;
}
inline void Stuff_Player::set_mafiaid(::google::protobuf::int32 value) {
  set_has_mafiaid();
  mafiaid_ = value;
}

// repeated .Share_Common.Stuff_Inventory Inventory = 7;
inline int Stuff_Player::inventory_size() const {
  return inventory_.size();
}
inline void Stuff_Player::clear_inventory() {
  inventory_.Clear();
}
inline const ::Share_Common::Stuff_Inventory& Stuff_Player::inventory(int index) const {
  return inventory_.Get(index);
}
inline ::Share_Common::Stuff_Inventory* Stuff_Player::mutable_inventory(int index) {
  return inventory_.Mutable(index);
}
inline ::Share_Common::Stuff_Inventory* Stuff_Player::add_inventory() {
  return inventory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Inventory >&
Stuff_Player::inventory() const {
  return inventory_;
}
inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Inventory >*
Stuff_Player::mutable_inventory() {
  return &inventory_;
}

// repeated .Share_Common.Stuff_Limit Limits = 8;
inline int Stuff_Player::limits_size() const {
  return limits_.size();
}
inline void Stuff_Player::clear_limits() {
  limits_.Clear();
}
inline const ::Share_Common::Stuff_Limit& Stuff_Player::limits(int index) const {
  return limits_.Get(index);
}
inline ::Share_Common::Stuff_Limit* Stuff_Player::mutable_limits(int index) {
  return limits_.Mutable(index);
}
inline ::Share_Common::Stuff_Limit* Stuff_Player::add_limits() {
  return limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Limit >&
Stuff_Player::limits() const {
  return limits_;
}
inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Limit >*
Stuff_Player::mutable_limits() {
  return &limits_;
}

// -------------------------------------------------------------------

// Stuff_Players

// optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
inline bool Stuff_Players::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Players::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Players::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Players::clear_type_t() {
  type_t_ = 3;
  clear_has_type_t();
}
inline ::Share_Common::S2C_Proto_Type Stuff_Players::type_t() const {
  return static_cast< ::Share_Common::S2C_Proto_Type >(type_t_);
}
inline void Stuff_Players::set_type_t(::Share_Common::S2C_Proto_Type value) {
  assert(::Share_Common::S2C_Proto_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// required string UserName = 2;
inline bool Stuff_Players::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Players::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Players::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Players::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Stuff_Players::username() const {
  return *username_;
}
inline void Stuff_Players::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_Players::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Stuff_Players::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stuff_Players::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Stuff_Players::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stuff_Players::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 Players = 3;
inline int Stuff_Players::players_size() const {
  return players_.size();
}
inline void Stuff_Players::clear_players() {
  players_.Clear();
}
inline ::google::protobuf::int32 Stuff_Players::players(int index) const {
  return players_.Get(index);
}
inline void Stuff_Players::set_players(int index, ::google::protobuf::int32 value) {
  players_.Set(index, value);
}
inline void Stuff_Players::add_players(::google::protobuf::int32 value) {
  players_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Stuff_Players::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Stuff_Players::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// Stuff_Limit

// optional int32 LimitId = 1;
inline bool Stuff_Limit::has_limitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Limit::set_has_limitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Limit::clear_has_limitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Limit::clear_limitid() {
  limitid_ = 0;
  clear_has_limitid();
}
inline ::google::protobuf::int32 Stuff_Limit::limitid() const {
  return limitid_;
}
inline void Stuff_Limit::set_limitid(::google::protobuf::int32 value) {
  set_has_limitid();
  limitid_ = value;
}

// optional int32 StartTime = 2;
inline bool Stuff_Limit::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Limit::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Limit::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Limit::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 Stuff_Limit::starttime() const {
  return starttime_;
}
inline void Stuff_Limit::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// -------------------------------------------------------------------

// Stuff_Creatures

// repeated .Share_Common.Stuff_Creature contents = 1;
inline int Stuff_Creatures::contents_size() const {
  return contents_.size();
}
inline void Stuff_Creatures::clear_contents() {
  contents_.Clear();
}
inline const ::Share_Common::Stuff_Creature& Stuff_Creatures::contents(int index) const {
  return contents_.Get(index);
}
inline ::Share_Common::Stuff_Creature* Stuff_Creatures::mutable_contents(int index) {
  return contents_.Mutable(index);
}
inline ::Share_Common::Stuff_Creature* Stuff_Creatures::add_contents() {
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Creature >&
Stuff_Creatures::contents() const {
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Share_Common::Stuff_Creature >*
Stuff_Creatures::mutable_contents() {
  return &contents_;
}

// -------------------------------------------------------------------

// Stuff_Creature

// optional int32 CreatureId = 1;
inline bool Stuff_Creature::has_creatureid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stuff_Creature::set_has_creatureid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stuff_Creature::clear_has_creatureid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stuff_Creature::clear_creatureid() {
  creatureid_ = 0;
  clear_has_creatureid();
}
inline ::google::protobuf::int32 Stuff_Creature::creatureid() const {
  return creatureid_;
}
inline void Stuff_Creature::set_creatureid(::google::protobuf::int32 value) {
  set_has_creatureid();
  creatureid_ = value;
}

// optional .Share_Common.Creature_Variety Variety = 2;
inline bool Stuff_Creature::has_variety() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stuff_Creature::set_has_variety() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stuff_Creature::clear_has_variety() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stuff_Creature::clear_variety() {
  variety_ = 1;
  clear_has_variety();
}
inline ::Share_Common::Creature_Variety Stuff_Creature::variety() const {
  return static_cast< ::Share_Common::Creature_Variety >(variety_);
}
inline void Stuff_Creature::set_variety(::Share_Common::Creature_Variety value) {
  assert(::Share_Common::Creature_Variety_IsValid(value));
  set_has_variety();
  variety_ = value;
}

// optional .Share_Common.Stuff_Vector3 Position = 3;
inline bool Stuff_Creature::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stuff_Creature::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stuff_Creature::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stuff_Creature::clear_position() {
  if (position_ != NULL) position_->::Share_Common::Stuff_Vector3::Clear();
  clear_has_position();
}
inline const ::Share_Common::Stuff_Vector3& Stuff_Creature::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Share_Common::Stuff_Vector3* Stuff_Creature::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Share_Common::Stuff_Vector3;
  return position_;
}
inline ::Share_Common::Stuff_Vector3* Stuff_Creature::release_position() {
  clear_has_position();
  ::Share_Common::Stuff_Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Stuff_Creature::set_allocated_position(::Share_Common::Stuff_Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// Common_Property

// required uint32 TId = 1;
inline bool Common_Property::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Common_Property::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Common_Property::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Common_Property::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 Common_Property::tid() const {
  return tid_;
}
inline void Common_Property::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional string name = 2;
inline bool Common_Property::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Common_Property::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Common_Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Common_Property::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Common_Property::name() const {
  return *name_;
}
inline void Common_Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Common_Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Common_Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Common_Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Common_Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Common_Property::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cool_time = 3;
inline bool Common_Property::has_cool_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Common_Property::set_has_cool_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Common_Property::clear_has_cool_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Common_Property::clear_cool_time() {
  cool_time_ = 0u;
  clear_has_cool_time();
}
inline ::google::protobuf::uint32 Common_Property::cool_time() const {
  return cool_time_;
}
inline void Common_Property::set_cool_time(::google::protobuf::uint32 value) {
  set_has_cool_time();
  cool_time_ = value;
}

// optional uint32 cool_type = 4;
inline bool Common_Property::has_cool_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Common_Property::set_has_cool_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Common_Property::clear_has_cool_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Common_Property::clear_cool_type() {
  cool_type_ = 0u;
  clear_has_cool_type();
}
inline ::google::protobuf::uint32 Common_Property::cool_type() const {
  return cool_type_;
}
inline void Common_Property::set_cool_type(::google::protobuf::uint32 value) {
  set_has_cool_type();
  cool_type_ = value;
}

// -------------------------------------------------------------------

// Item_Medichine

// optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
inline bool Item_Medichine::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item_Medichine::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item_Medichine::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item_Medichine::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::Share_Common::Item_Type Item_Medichine::type_t() const {
  return static_cast< ::Share_Common::Item_Type >(type_t_);
}
inline void Item_Medichine::set_type_t(::Share_Common::Item_Type value) {
  assert(::Share_Common::Item_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional .Share_Common.Common_Property comm = 2;
inline bool Item_Medichine::has_comm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item_Medichine::set_has_comm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item_Medichine::clear_has_comm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item_Medichine::clear_comm() {
  if (comm_ != NULL) comm_->::Share_Common::Common_Property::Clear();
  clear_has_comm();
}
inline const ::Share_Common::Common_Property& Item_Medichine::comm() const {
  return comm_ != NULL ? *comm_ : *default_instance_->comm_;
}
inline ::Share_Common::Common_Property* Item_Medichine::mutable_comm() {
  set_has_comm();
  if (comm_ == NULL) comm_ = new ::Share_Common::Common_Property;
  return comm_;
}
inline ::Share_Common::Common_Property* Item_Medichine::release_comm() {
  clear_has_comm();
  ::Share_Common::Common_Property* temp = comm_;
  comm_ = NULL;
  return temp;
}
inline void Item_Medichine::set_allocated_comm(::Share_Common::Common_Property* comm) {
  delete comm_;
  comm_ = comm;
  if (comm) {
    set_has_comm();
  } else {
    clear_has_comm();
  }
}

// optional int32 mode = 3;
inline bool Item_Medichine::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item_Medichine::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item_Medichine::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item_Medichine::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 Item_Medichine::mode() const {
  return mode_;
}
inline void Item_Medichine::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 time = 4;
inline bool Item_Medichine::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Item_Medichine::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Item_Medichine::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Item_Medichine::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Item_Medichine::time() const {
  return time_;
}
inline void Item_Medichine::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// Item_Mine

// optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
inline bool Item_Mine::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item_Mine::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item_Mine::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item_Mine::clear_type_t() {
  type_t_ = 2;
  clear_has_type_t();
}
inline ::Share_Common::Item_Type Item_Mine::type_t() const {
  return static_cast< ::Share_Common::Item_Type >(type_t_);
}
inline void Item_Mine::set_type_t(::Share_Common::Item_Type value) {
  assert(::Share_Common::Item_Type_IsValid(value));
  set_has_type_t();
  type_t_ = value;
}

// optional int32 mode = 2;
inline bool Item_Mine::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item_Mine::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item_Mine::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item_Mine::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 Item_Mine::mode() const {
  return mode_;
}
inline void Item_Mine::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 time = 3;
inline bool Item_Mine::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item_Mine::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item_Mine::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item_Mine::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Item_Mine::time() const {
  return time_;
}
inline void Item_Mine::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated int32 awards = 4;
inline int Item_Mine::awards_size() const {
  return awards_.size();
}
inline void Item_Mine::clear_awards() {
  awards_.Clear();
}
inline ::google::protobuf::int32 Item_Mine::awards(int index) const {
  return awards_.Get(index);
}
inline void Item_Mine::set_awards(int index, ::google::protobuf::int32 value) {
  awards_.Set(index, value);
}
inline void Item_Mine::add_awards(::google::protobuf::int32 value) {
  awards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item_Mine::awards() const {
  return awards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item_Mine::mutable_awards() {
  return &awards_;
}

// -------------------------------------------------------------------

// Config_Path

// optional string path = 1;
inline bool Config_Path::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config_Path::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config_Path::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config_Path::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Config_Path::path() const {
  return *path_;
}
inline void Config_Path::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Config_Path::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Config_Path::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config_Path::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Config_Path::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config_Path::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string svn_path = 2;
inline bool Config_Path::has_svn_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config_Path::set_has_svn_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config_Path::clear_has_svn_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config_Path::clear_svn_path() {
  if (svn_path_ != &::google::protobuf::internal::kEmptyString) {
    svn_path_->clear();
  }
  clear_has_svn_path();
}
inline const ::std::string& Config_Path::svn_path() const {
  return *svn_path_;
}
inline void Config_Path::set_svn_path(const ::std::string& value) {
  set_has_svn_path();
  if (svn_path_ == &::google::protobuf::internal::kEmptyString) {
    svn_path_ = new ::std::string;
  }
  svn_path_->assign(value);
}
inline void Config_Path::set_svn_path(const char* value) {
  set_has_svn_path();
  if (svn_path_ == &::google::protobuf::internal::kEmptyString) {
    svn_path_ = new ::std::string;
  }
  svn_path_->assign(value);
}
inline void Config_Path::set_svn_path(const char* value, size_t size) {
  set_has_svn_path();
  if (svn_path_ == &::google::protobuf::internal::kEmptyString) {
    svn_path_ = new ::std::string;
  }
  svn_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config_Path::mutable_svn_path() {
  set_has_svn_path();
  if (svn_path_ == &::google::protobuf::internal::kEmptyString) {
    svn_path_ = new ::std::string;
  }
  return svn_path_;
}
inline ::std::string* Config_Path::release_svn_path() {
  clear_has_svn_path();
  if (svn_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = svn_path_;
    svn_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config_Path::set_allocated_svn_path(::std::string* svn_path) {
  if (svn_path_ != &::google::protobuf::internal::kEmptyString) {
    delete svn_path_;
  }
  if (svn_path) {
    set_has_svn_path();
    svn_path_ = svn_path;
  } else {
    clear_has_svn_path();
    svn_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Config_Common_Limit

// optional int32 TId = 1;
inline bool Config_Common_Limit::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config_Common_Limit::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config_Common_Limit::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config_Common_Limit::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 Config_Common_Limit::tid() const {
  return tid_;
}
inline void Config_Common_Limit::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional .Share_Common.Clear_Time Clear_Type = 2;
inline bool Config_Common_Limit::has_clear_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config_Common_Limit::set_has_clear_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config_Common_Limit::clear_has_clear_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config_Common_Limit::clear_clear_type() {
  clear_type_ = 1;
  clear_has_clear_type();
}
inline ::Share_Common::Clear_Time Config_Common_Limit::clear_type() const {
  return static_cast< ::Share_Common::Clear_Time >(clear_type_);
}
inline void Config_Common_Limit::set_clear_type(::Share_Common::Clear_Time value) {
  assert(::Share_Common::Clear_Time_IsValid(value));
  set_has_clear_type();
  clear_type_ = value;
}

// optional int32 LimitTimes = 3;
inline bool Config_Common_Limit::has_limittimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config_Common_Limit::set_has_limittimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config_Common_Limit::clear_has_limittimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config_Common_Limit::clear_limittimes() {
  limittimes_ = 0;
  clear_has_limittimes();
}
inline ::google::protobuf::int32 Config_Common_Limit::limittimes() const {
  return limittimes_;
}
inline void Config_Common_Limit::set_limittimes(::google::protobuf::int32 value) {
  set_has_limittimes();
  limittimes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Share_Common

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Stuff_Message_MC_Type>() {
  return ::Share_Common::Stuff_Message_MC_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Creature_Variety>() {
  return ::Share_Common::Creature_Variety_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Server_State>() {
  return ::Share_Common::Server_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Version>() {
  return ::Share_Common::Version_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::C2S_Proto_Type>() {
  return ::Share_Common::C2S_Proto_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::S2C_Proto_Type>() {
  return ::Share_Common::S2C_Proto_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Item_Type>() {
  return ::Share_Common::Item_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Share_Common::Clear_Time>() {
  return ::Share_Common::Clear_Time_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Share_5fCommon_2eproto__INCLUDED
