// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Share_Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Share_Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Share_Common {

namespace {

const ::google::protobuf::Descriptor* Stuff_Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stuff_Message_MC_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Message_Queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Message_Queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Inventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plant_Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plant_Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_GetPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_GetPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Players_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Players_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Limit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Creatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Creatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stuff_Creature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stuff_Creature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Common_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Common_Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_Medichine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_Medichine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_Mine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_Mine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_Common_Limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_Common_Limit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Creature_Variety_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Server_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Version_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* C2S_Proto_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* S2C_Proto_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Item_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Clear_Time_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Share_5fCommon_2eproto() {
  protobuf_AddDesc_Share_5fCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Share_Common.proto");
  GOOGLE_CHECK(file != NULL);
  Stuff_Vector3_descriptor_ = file->message_type(0);
  static const int Stuff_Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Vector3, z_),
  };
  Stuff_Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Vector3_descriptor_,
      Stuff_Vector3::default_instance_,
      Stuff_Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Vector3));
  Stuff_Message_descriptor_ = file->message_type(1);
  static const int Stuff_Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, paras_),
  };
  Stuff_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Message_descriptor_,
      Stuff_Message::default_instance_,
      Stuff_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Message));
  Stuff_Message_MC_Type_descriptor_ = Stuff_Message_descriptor_->enum_type(0);
  Stuff_Message_Queue_descriptor_ = file->message_type(2);
  static const int Stuff_Message_Queue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message_Queue, contents_),
  };
  Stuff_Message_Queue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Message_Queue_descriptor_,
      Stuff_Message_Queue::default_instance_,
      Stuff_Message_Queue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message_Queue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Message_Queue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Message_Queue));
  Stuff_Item_descriptor_ = file->message_type(3);
  static const int Stuff_Item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, addonid_),
  };
  Stuff_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Item_descriptor_,
      Stuff_Item::default_instance_,
      Stuff_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Item));
  Stuff_Inventory_descriptor_ = file->message_type(4);
  static const int Stuff_Inventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Inventory, items_),
  };
  Stuff_Inventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Inventory_descriptor_,
      Stuff_Inventory::default_instance_,
      Stuff_Inventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Inventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Inventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Inventory));
  Plant_Config_descriptor_ = file->message_type(5);
  static const int Plant_Config_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, ripe_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, consume_diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, reward_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, version_),
  };
  Plant_Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plant_Config_descriptor_,
      Plant_Config::default_instance_,
      Plant_Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plant_Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plant_Config));
  Stuff_Account_descriptor_ = file->message_type(6);
  static const int Stuff_Account_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Account, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Account, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Account, password_),
  };
  Stuff_Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Account_descriptor_,
      Stuff_Account::default_instance_,
      Stuff_Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Account));
  Stuff_GetPlayer_descriptor_ = file->message_type(7);
  static const int Stuff_GetPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_GetPlayer, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_GetPlayer, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_GetPlayer, playerid_),
  };
  Stuff_GetPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_GetPlayer_descriptor_,
      Stuff_GetPlayer::default_instance_,
      Stuff_GetPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_GetPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_GetPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_GetPlayer));
  Stuff_Login_descriptor_ = file->message_type(8);
  static const int Stuff_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Login, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Login, account_),
  };
  Stuff_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Login_descriptor_,
      Stuff_Login::default_instance_,
      Stuff_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Login));
  Stuff_Player_descriptor_ = file->message_type(9);
  static const int Stuff_Player_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, variety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, nationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, mafiaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, limits_),
  };
  Stuff_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Player_descriptor_,
      Stuff_Player::default_instance_,
      Stuff_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Player));
  Stuff_Players_descriptor_ = file->message_type(10);
  static const int Stuff_Players_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Players, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Players, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Players, players_),
  };
  Stuff_Players_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Players_descriptor_,
      Stuff_Players::default_instance_,
      Stuff_Players_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Players, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Players, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Players));
  Stuff_Limit_descriptor_ = file->message_type(11);
  static const int Stuff_Limit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Limit, limitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Limit, starttime_),
  };
  Stuff_Limit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Limit_descriptor_,
      Stuff_Limit::default_instance_,
      Stuff_Limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Limit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Limit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Limit));
  Stuff_Creatures_descriptor_ = file->message_type(12);
  static const int Stuff_Creatures_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creatures, contents_),
  };
  Stuff_Creatures_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Creatures_descriptor_,
      Stuff_Creatures::default_instance_,
      Stuff_Creatures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creatures, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creatures, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Creatures));
  Stuff_Creature_descriptor_ = file->message_type(13);
  static const int Stuff_Creature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creature, creatureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creature, variety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creature, position_),
  };
  Stuff_Creature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stuff_Creature_descriptor_,
      Stuff_Creature::default_instance_,
      Stuff_Creature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stuff_Creature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stuff_Creature));
  Common_Property_descriptor_ = file->message_type(14);
  static const int Common_Property_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, cool_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, cool_type_),
  };
  Common_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Common_Property_descriptor_,
      Common_Property::default_instance_,
      Common_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Common_Property));
  Item_Medichine_descriptor_ = file->message_type(15);
  static const int Item_Medichine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, time_),
  };
  Item_Medichine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_Medichine_descriptor_,
      Item_Medichine::default_instance_,
      Item_Medichine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Medichine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_Medichine));
  Item_Mine_descriptor_ = file->message_type(16);
  static const int Item_Mine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, type_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, awards_),
  };
  Item_Mine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_Mine_descriptor_,
      Item_Mine::default_instance_,
      Item_Mine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item_Mine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item_Mine));
  Config_Path_descriptor_ = file->message_type(17);
  static const int Config_Path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Path, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Path, svn_path_),
  };
  Config_Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_Path_descriptor_,
      Config_Path::default_instance_,
      Config_Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config_Path));
  Config_Common_Limit_descriptor_ = file->message_type(18);
  static const int Config_Common_Limit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Common_Limit, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Common_Limit, clear_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Common_Limit, limittimes_),
  };
  Config_Common_Limit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_Common_Limit_descriptor_,
      Config_Common_Limit::default_instance_,
      Config_Common_Limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Common_Limit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_Common_Limit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config_Common_Limit));
  Creature_Variety_descriptor_ = file->enum_type(0);
  Server_State_descriptor_ = file->enum_type(1);
  Version_descriptor_ = file->enum_type(2);
  C2S_Proto_Type_descriptor_ = file->enum_type(3);
  S2C_Proto_Type_descriptor_ = file->enum_type(4);
  Item_Type_descriptor_ = file->enum_type(5);
  Clear_Time_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Share_5fCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Vector3_descriptor_, &Stuff_Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Message_descriptor_, &Stuff_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Message_Queue_descriptor_, &Stuff_Message_Queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Item_descriptor_, &Stuff_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Inventory_descriptor_, &Stuff_Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plant_Config_descriptor_, &Plant_Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Account_descriptor_, &Stuff_Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_GetPlayer_descriptor_, &Stuff_GetPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Login_descriptor_, &Stuff_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Player_descriptor_, &Stuff_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Players_descriptor_, &Stuff_Players::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Limit_descriptor_, &Stuff_Limit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Creatures_descriptor_, &Stuff_Creatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stuff_Creature_descriptor_, &Stuff_Creature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Common_Property_descriptor_, &Common_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_Medichine_descriptor_, &Item_Medichine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_Mine_descriptor_, &Item_Mine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_Path_descriptor_, &Config_Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_Common_Limit_descriptor_, &Config_Common_Limit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Share_5fCommon_2eproto() {
  delete Stuff_Vector3::default_instance_;
  delete Stuff_Vector3_reflection_;
  delete Stuff_Message::default_instance_;
  delete Stuff_Message_reflection_;
  delete Stuff_Message_Queue::default_instance_;
  delete Stuff_Message_Queue_reflection_;
  delete Stuff_Item::default_instance_;
  delete Stuff_Item_reflection_;
  delete Stuff_Inventory::default_instance_;
  delete Stuff_Inventory_reflection_;
  delete Plant_Config::default_instance_;
  delete Plant_Config_reflection_;
  delete Stuff_Account::default_instance_;
  delete Stuff_Account_reflection_;
  delete Stuff_GetPlayer::default_instance_;
  delete Stuff_GetPlayer_reflection_;
  delete Stuff_Login::default_instance_;
  delete Stuff_Login_reflection_;
  delete Stuff_Player::default_instance_;
  delete Stuff_Player_reflection_;
  delete Stuff_Players::default_instance_;
  delete Stuff_Players_reflection_;
  delete Stuff_Limit::default_instance_;
  delete Stuff_Limit_reflection_;
  delete Stuff_Creatures::default_instance_;
  delete Stuff_Creatures_reflection_;
  delete Stuff_Creature::default_instance_;
  delete Stuff_Creature_reflection_;
  delete Common_Property::default_instance_;
  delete Common_Property_reflection_;
  delete Item_Medichine::default_instance_;
  delete Item_Medichine_reflection_;
  delete Item_Mine::default_instance_;
  delete Item_Mine_reflection_;
  delete Config_Path::default_instance_;
  delete Config_Path_reflection_;
  delete Config_Common_Limit::default_instance_;
  delete Config_Common_Limit_reflection_;
}

void protobuf_AddDesc_Share_5fCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Share_Common.proto\022\014Share_Common\"0\n\rSt"
    "uff_Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
    " \001(\002\"\221\001\n\rStuff_Message\0223\n\006type_t\030\001 \001(\0162#"
    ".Share_Common.Stuff_Message.MC_Type\022\016\n\006s"
    "ource\030\002 \001(\005\022\016\n\006target\030\003 \001(\005\022\r\n\005paras\030\004 \003"
    "(\005\"\034\n\007MC_Type\022\021\n\rMC_EnterScene\020\001\"D\n\023Stuf"
    "f_Message_Queue\022-\n\010contents\030\001 \003(\0132\033.Shar"
    "e_Common.Stuff_Message\"t\n\nStuff_Item\022\016\n\006"
    "ItemId\030\001 \002(\005\022\'\n\006type_t\030\002 \001(\0162\027.Share_Com"
    "mon.Item_Type\022\014\n\004Bind\030\003 \001(\010\022\016\n\006BaseId\030\004 "
    "\001(\005\022\017\n\007AddonId\030\005 \001(\005\":\n\017Stuff_Inventory\022"
    "\'\n\005Items\030\001 \003(\0132\030.Share_Common.Stuff_Item"
    "\"\310\001\n\014Plant_Config\022\022\n\nitem_index\030\001 \001(\005\022\021\n"
    "\titem_name\030\002 \001(\t\022\022\n\nitem_level\030\003 \001(\005\022\021\n\t"
    "ripe_time\030\004 \001(\005\022\030\n\020consume_diamonds\030\005 \001("
    "\005\022\022\n\nreward_tid\030\006 \001(\005\022\024\n\014unlock_level\030\007 "
    "\001(\005\022&\n\007version\030\010 \001(\0162\025.Share_Common.Vers"
    "ion\"v\n\rStuff_Account\022A\n\006type_t\030\001 \001(\0162\034.S"
    "hare_Common.C2S_Proto_Type:\023Proto_Stuff_"
    "Account\022\020\n\010UserName\030\002 \001(\t\022\020\n\010PassWord\030\003 "
    "\001(\t\"z\n\017Stuff_GetPlayer\022C\n\006type_t\030\001 \001(\0162\034"
    ".Share_Common.C2S_Proto_Type:\025Proto_Stuf"
    "f_GetPlayer\022\020\n\010UserName\030\002 \001(\t\022\020\n\010PlayerI"
    "d\030\003 \001(\005\"|\n\013Stuff_Login\022\?\n\006type_t\030\001 \001(\0162\034"
    ".Share_Common.C2S_Proto_Type:\021Proto_Stuf"
    "f_Login\022,\n\007Account\030\002 \001(\0132\033.Share_Common."
    "Stuff_Account\"\315\002\n\014Stuff_Player\022@\n\006type_t"
    "\030\001 \001(\0162\034.Share_Common.S2C_Proto_Type:\022Pr"
    "oto_Stuff_Player\022\020\n\010PlayerId\030\002 \002(\005\022-\n\010Po"
    "sition\030\003 \001(\0132\033.Share_Common.Stuff_Vector"
    "3\022:\n\007Variety\030\004 \001(\0162\036.Share_Common.Creatu"
    "re_Variety:\tCV_Player\022\020\n\010NationId\030\005 \001(\005\022"
    "\017\n\007MafiaId\030\006 \001(\005\0220\n\tInventory\030\007 \003(\0132\035.Sh"
    "are_Common.Stuff_Inventory\022)\n\006Limits\030\010 \003"
    "(\0132\031.Share_Common.Stuff_Limit\"u\n\rStuff_P"
    "layers\022A\n\006type_t\030\001 \001(\0162\034.Share_Common.S2"
    "C_Proto_Type:\023Proto_Stuff_Players\022\020\n\010Use"
    "rName\030\002 \002(\t\022\017\n\007Players\030\003 \003(\005\"1\n\013Stuff_Li"
    "mit\022\017\n\007LimitId\030\001 \001(\005\022\021\n\tStartTime\030\002 \001(\005\""
    "A\n\017Stuff_Creatures\022.\n\010contents\030\001 \003(\0132\034.S"
    "hare_Common.Stuff_Creature\"\204\001\n\016Stuff_Cre"
    "ature\022\022\n\nCreatureId\030\001 \001(\005\022/\n\007Variety\030\002 \001"
    "(\0162\036.Share_Common.Creature_Variety\022-\n\010Po"
    "sition\030\003 \001(\0132\033.Share_Common.Stuff_Vector"
    "3\"R\n\017Common_Property\022\013\n\003TId\030\001 \002(\r\022\014\n\004nam"
    "e\030\002 \001(\t\022\021\n\tcool_time\030\003 \001(\r\022\021\n\tcool_type\030"
    "\004 \001(\r\"\227\001\n\016Item_Medichine\022<\n\006type_t\030\001 \001(\016"
    "2\027.Share_Common.Item_Type:\023Data_Item_Med"
    "ichine\022+\n\004comm\030\002 \001(\0132\035.Share_Common.Comm"
    "on_Property\022\014\n\004mode\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\""
    "p\n\tItem_Mine\0227\n\006type_t\030\001 \001(\0162\027.Share_Com"
    "mon.Item_Type:\016Data_Item_Mine\022\014\n\004mode\030\002 "
    "\001(\005\022\014\n\004time\030\003 \001(\005\022\016\n\006awards\030\004 \003(\005\"-\n\013Con"
    "fig_Path\022\014\n\004path\030\001 \001(\t\022\020\n\010svn_path\030\002 \001(\t"
    "\"d\n\023Config_Common_Limit\022\013\n\003TId\030\001 \001(\005\022,\n\n"
    "Clear_Type\030\002 \001(\0162\030.Share_Common.Clear_Ti"
    "me\022\022\n\nLimitTimes\030\003 \001(\005*:\n\020Creature_Varie"
    "ty\022\013\n\007CV_Null\020\001\022\r\n\tCV_Player\020\002\022\n\n\006CV_NPC"
    "\020\003*^\n\014Server_State\022\017\n\013SS_Starting\020\001\022\016\n\nS"
    "S_Started\020\002\022\016\n\nSS_Working\020\003\022\016\n\nSS_Closin"
    "g\020\004\022\r\n\tSS_Closed\020\005*F\n\007Version\022\n\n\006GLOBAL\020"
    "\001\022\010\n\004DALU\020\002\022\n\n\006TAIWAN\020\003\022\n\n\006HANGUO\020\004\022\r\n\tD"
    "ONGNANYA\020\005*y\n\016C2S_Proto_Type\022\034\n\030Proto_St"
    "uff_Client_Begin\020\001\022\027\n\023Proto_Stuff_Accoun"
    "t\020\002\022\031\n\025Proto_Stuff_GetPlayer\020\003\022\025\n\021Proto_"
    "Stuff_Login\020\004*_\n\016S2C_Proto_Type\022\034\n\030Proto"
    "_Stuff_Server_Begin\020\001\022\026\n\022Proto_Stuff_Pla"
    "yer\020\002\022\027\n\023Proto_Stuff_Players\020\003*8\n\tItem_T"
    "ype\022\027\n\023Data_Item_Medichine\020\001\022\022\n\016Data_Ite"
    "m_Mine\020\002*4\n\nClear_Time\022\010\n\004Year\020\001\022\t\n\005Mont"
    "h\020\002\022\007\n\003Day\020\003\022\010\n\004Hour\020\004", 2822);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Share_Common.proto", &protobuf_RegisterTypes);
  Stuff_Vector3::default_instance_ = new Stuff_Vector3();
  Stuff_Message::default_instance_ = new Stuff_Message();
  Stuff_Message_Queue::default_instance_ = new Stuff_Message_Queue();
  Stuff_Item::default_instance_ = new Stuff_Item();
  Stuff_Inventory::default_instance_ = new Stuff_Inventory();
  Plant_Config::default_instance_ = new Plant_Config();
  Stuff_Account::default_instance_ = new Stuff_Account();
  Stuff_GetPlayer::default_instance_ = new Stuff_GetPlayer();
  Stuff_Login::default_instance_ = new Stuff_Login();
  Stuff_Player::default_instance_ = new Stuff_Player();
  Stuff_Players::default_instance_ = new Stuff_Players();
  Stuff_Limit::default_instance_ = new Stuff_Limit();
  Stuff_Creatures::default_instance_ = new Stuff_Creatures();
  Stuff_Creature::default_instance_ = new Stuff_Creature();
  Common_Property::default_instance_ = new Common_Property();
  Item_Medichine::default_instance_ = new Item_Medichine();
  Item_Mine::default_instance_ = new Item_Mine();
  Config_Path::default_instance_ = new Config_Path();
  Config_Common_Limit::default_instance_ = new Config_Common_Limit();
  Stuff_Vector3::default_instance_->InitAsDefaultInstance();
  Stuff_Message::default_instance_->InitAsDefaultInstance();
  Stuff_Message_Queue::default_instance_->InitAsDefaultInstance();
  Stuff_Item::default_instance_->InitAsDefaultInstance();
  Stuff_Inventory::default_instance_->InitAsDefaultInstance();
  Plant_Config::default_instance_->InitAsDefaultInstance();
  Stuff_Account::default_instance_->InitAsDefaultInstance();
  Stuff_GetPlayer::default_instance_->InitAsDefaultInstance();
  Stuff_Login::default_instance_->InitAsDefaultInstance();
  Stuff_Player::default_instance_->InitAsDefaultInstance();
  Stuff_Players::default_instance_->InitAsDefaultInstance();
  Stuff_Limit::default_instance_->InitAsDefaultInstance();
  Stuff_Creatures::default_instance_->InitAsDefaultInstance();
  Stuff_Creature::default_instance_->InitAsDefaultInstance();
  Common_Property::default_instance_->InitAsDefaultInstance();
  Item_Medichine::default_instance_->InitAsDefaultInstance();
  Item_Mine::default_instance_->InitAsDefaultInstance();
  Config_Path::default_instance_->InitAsDefaultInstance();
  Config_Common_Limit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Share_5fCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Share_5fCommon_2eproto {
  StaticDescriptorInitializer_Share_5fCommon_2eproto() {
    protobuf_AddDesc_Share_5fCommon_2eproto();
  }
} static_descriptor_initializer_Share_5fCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Creature_Variety_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Creature_Variety_descriptor_;
}
bool Creature_Variety_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Server_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_State_descriptor_;
}
bool Server_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}
bool Version_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* C2S_Proto_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Proto_Type_descriptor_;
}
bool C2S_Proto_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* S2C_Proto_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Proto_Type_descriptor_;
}
bool S2C_Proto_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Item_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_Type_descriptor_;
}
bool Item_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Clear_Time_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clear_Time_descriptor_;
}
bool Clear_Time_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Vector3::kXFieldNumber;
const int Stuff_Vector3::kYFieldNumber;
const int Stuff_Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Stuff_Vector3::Stuff_Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Vector3::InitAsDefaultInstance() {
}

Stuff_Vector3::Stuff_Vector3(const Stuff_Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Vector3::~Stuff_Vector3() {
  SharedDtor();
}

void Stuff_Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Vector3_descriptor_;
}

const Stuff_Vector3& Stuff_Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Vector3* Stuff_Vector3::default_instance_ = NULL;

Stuff_Vector3* Stuff_Vector3::New() const {
  return new Stuff_Vector3;
}

void Stuff_Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Vector3::MergeFrom(const Stuff_Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Vector3::CopyFrom(const Stuff_Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Vector3::IsInitialized() const {

  return true;
}

void Stuff_Vector3::Swap(Stuff_Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Vector3_descriptor_;
  metadata.reflection = Stuff_Vector3_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stuff_Message_MC_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Message_MC_Type_descriptor_;
}
bool Stuff_Message_MC_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Stuff_Message_MC_Type Stuff_Message::MC_EnterScene;
const Stuff_Message_MC_Type Stuff_Message::MC_Type_MIN;
const Stuff_Message_MC_Type Stuff_Message::MC_Type_MAX;
const int Stuff_Message::MC_Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Stuff_Message::kTypeTFieldNumber;
const int Stuff_Message::kSourceFieldNumber;
const int Stuff_Message::kTargetFieldNumber;
const int Stuff_Message::kParasFieldNumber;
#endif  // !_MSC_VER

Stuff_Message::Stuff_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Message::InitAsDefaultInstance() {
}

Stuff_Message::Stuff_Message(const Stuff_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Message::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 1;
  source_ = 0;
  target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Message::~Stuff_Message() {
  SharedDtor();
}

void Stuff_Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Message_descriptor_;
}

const Stuff_Message& Stuff_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Message* Stuff_Message::default_instance_ = NULL;

Stuff_Message* Stuff_Message::New() const {
  return new Stuff_Message;
}

void Stuff_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 1;
    source_ = 0;
    target_ = 0;
  }
  paras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Stuff_Message_MC_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::Stuff_Message_MC_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source;
        break;
      }

      // optional int32 source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paras;
        break;
      }

      // repeated int32 paras = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paras:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_paras())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paras())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paras;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional int32 source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source(), output);
  }

  // optional int32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  // repeated int32 paras = 4;
  for (int i = 0; i < this->paras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->paras(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional int32 source = 2;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source(), target);
  }

  // optional int32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  // repeated int32 paras = 4;
  for (int i = 0; i < this->paras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->paras(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.Stuff_Message.MC_Type type_t = 1;
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional int32 source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

  }
  // repeated int32 paras = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->paras_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->paras(i));
    }
    total_size += 1 * this->paras_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Message::MergeFrom(const Stuff_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  paras_.MergeFrom(from.paras_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Message::CopyFrom(const Stuff_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Message::IsInitialized() const {

  return true;
}

void Stuff_Message::Swap(Stuff_Message* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    paras_.Swap(&other->paras_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Message_descriptor_;
  metadata.reflection = Stuff_Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Message_Queue::kContentsFieldNumber;
#endif  // !_MSC_VER

Stuff_Message_Queue::Stuff_Message_Queue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Message_Queue::InitAsDefaultInstance() {
}

Stuff_Message_Queue::Stuff_Message_Queue(const Stuff_Message_Queue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Message_Queue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Message_Queue::~Stuff_Message_Queue() {
  SharedDtor();
}

void Stuff_Message_Queue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Message_Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Message_Queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Message_Queue_descriptor_;
}

const Stuff_Message_Queue& Stuff_Message_Queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Message_Queue* Stuff_Message_Queue::default_instance_ = NULL;

Stuff_Message_Queue* Stuff_Message_Queue::New() const {
  return new Stuff_Message_Queue;
}

void Stuff_Message_Queue::Clear() {
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Message_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Share_Common.Stuff_Message contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Message_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Share_Common.Stuff_Message contents = 1;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Message_Queue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Share_Common.Stuff_Message contents = 1;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Message_Queue::ByteSize() const {
  int total_size = 0;

  // repeated .Share_Common.Stuff_Message contents = 1;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Message_Queue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Message_Queue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Message_Queue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Message_Queue::MergeFrom(const Stuff_Message_Queue& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Message_Queue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Message_Queue::CopyFrom(const Stuff_Message_Queue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Message_Queue::IsInitialized() const {

  return true;
}

void Stuff_Message_Queue::Swap(Stuff_Message_Queue* other) {
  if (other != this) {
    contents_.Swap(&other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Message_Queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Message_Queue_descriptor_;
  metadata.reflection = Stuff_Message_Queue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Item::kItemIdFieldNumber;
const int Stuff_Item::kTypeTFieldNumber;
const int Stuff_Item::kBindFieldNumber;
const int Stuff_Item::kBaseIdFieldNumber;
const int Stuff_Item::kAddonIdFieldNumber;
#endif  // !_MSC_VER

Stuff_Item::Stuff_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Item::InitAsDefaultInstance() {
}

Stuff_Item::Stuff_Item(const Stuff_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Item::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  type_t_ = 1;
  bind_ = false;
  baseid_ = 0;
  addonid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Item::~Stuff_Item() {
  SharedDtor();
}

void Stuff_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Item_descriptor_;
}

const Stuff_Item& Stuff_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Item* Stuff_Item::default_instance_ = NULL;

Stuff_Item* Stuff_Item::New() const {
  return new Stuff_Item;
}

void Stuff_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    type_t_ = 1;
    bind_ = false;
    baseid_ = 0;
    addonid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_t;
        break;
      }

      // optional .Share_Common.Item_Type type_t = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_t:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Item_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::Item_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Bind;
        break;
      }

      // optional bool Bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BaseId;
        break;
      }

      // optional int32 BaseId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AddonId;
        break;
      }

      // optional int32 AddonId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addonid_)));
          set_has_addonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional .Share_Common.Item_Type type_t = 2;
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type_t(), output);
  }

  // optional bool Bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bind(), output);
  }

  // optional int32 BaseId = 4;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->baseid(), output);
  }

  // optional int32 AddonId = 5;
  if (has_addonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional .Share_Common.Item_Type type_t = 2;
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type_t(), target);
  }

  // optional bool Bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bind(), target);
  }

  // optional int32 BaseId = 4;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->baseid(), target);
  }

  // optional int32 AddonId = 5;
  if (has_addonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional .Share_Common.Item_Type type_t = 2;
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional bool Bind = 3;
    if (has_bind()) {
      total_size += 1 + 1;
    }

    // optional int32 BaseId = 4;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseid());
    }

    // optional int32 AddonId = 5;
    if (has_addonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Item::MergeFrom(const Stuff_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_addonid()) {
      set_addonid(from.addonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Item::CopyFrom(const Stuff_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Stuff_Item::Swap(Stuff_Item* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(type_t_, other->type_t_);
    std::swap(bind_, other->bind_);
    std::swap(baseid_, other->baseid_);
    std::swap(addonid_, other->addonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Item_descriptor_;
  metadata.reflection = Stuff_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Inventory::kItemsFieldNumber;
#endif  // !_MSC_VER

Stuff_Inventory::Stuff_Inventory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Inventory::InitAsDefaultInstance() {
}

Stuff_Inventory::Stuff_Inventory(const Stuff_Inventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Inventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Inventory::~Stuff_Inventory() {
  SharedDtor();
}

void Stuff_Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Inventory_descriptor_;
}

const Stuff_Inventory& Stuff_Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Inventory* Stuff_Inventory::default_instance_ = NULL;

Stuff_Inventory* Stuff_Inventory::New() const {
  return new Stuff_Inventory;
}

void Stuff_Inventory::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Share_Common.Stuff_Item Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Share_Common.Stuff_Item Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Inventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Share_Common.Stuff_Item Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Inventory::ByteSize() const {
  int total_size = 0;

  // repeated .Share_Common.Stuff_Item Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Inventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Inventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Inventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Inventory::MergeFrom(const Stuff_Inventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Inventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Inventory::CopyFrom(const Stuff_Inventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Inventory::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Stuff_Inventory::Swap(Stuff_Inventory* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Inventory_descriptor_;
  metadata.reflection = Stuff_Inventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plant_Config::kItemIndexFieldNumber;
const int Plant_Config::kItemNameFieldNumber;
const int Plant_Config::kItemLevelFieldNumber;
const int Plant_Config::kRipeTimeFieldNumber;
const int Plant_Config::kConsumeDiamondsFieldNumber;
const int Plant_Config::kRewardTidFieldNumber;
const int Plant_Config::kUnlockLevelFieldNumber;
const int Plant_Config::kVersionFieldNumber;
#endif  // !_MSC_VER

Plant_Config::Plant_Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plant_Config::InitAsDefaultInstance() {
}

Plant_Config::Plant_Config(const Plant_Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plant_Config::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_level_ = 0;
  ripe_time_ = 0;
  consume_diamonds_ = 0;
  reward_tid_ = 0;
  unlock_level_ = 0;
  version_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plant_Config::~Plant_Config() {
  SharedDtor();
}

void Plant_Config::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void Plant_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plant_Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plant_Config_descriptor_;
}

const Plant_Config& Plant_Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Plant_Config* Plant_Config::default_instance_ = NULL;

Plant_Config* Plant_Config::New() const {
  return new Plant_Config;
}

void Plant_Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_index_ = 0;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    item_level_ = 0;
    ripe_time_ = 0;
    consume_diamonds_ = 0;
    reward_tid_ = 0;
    unlock_level_ = 0;
    version_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plant_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }

      // optional string item_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level;
        break;
      }

      // optional int32 item_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ripe_time;
        break;
      }

      // optional int32 ripe_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ripe_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ripe_time_)));
          set_has_ripe_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume_diamonds;
        break;
      }

      // optional int32 consume_diamonds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_diamonds_)));
          set_has_consume_diamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_tid;
        break;
      }

      // optional int32 reward_tid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_tid_)));
          set_has_reward_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unlock_level;
        break;
      }

      // optional int32 unlock_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional .Share_Common.Version version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Version_IsValid(value)) {
            set_version(static_cast< ::Share_Common::Version >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plant_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_index(), output);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_name(), output);
  }

  // optional int32 item_level = 3;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_level(), output);
  }

  // optional int32 ripe_time = 4;
  if (has_ripe_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ripe_time(), output);
  }

  // optional int32 consume_diamonds = 5;
  if (has_consume_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->consume_diamonds(), output);
  }

  // optional int32 reward_tid = 6;
  if (has_reward_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_tid(), output);
  }

  // optional int32 unlock_level = 7;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unlock_level(), output);
  }

  // optional .Share_Common.Version version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plant_Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_index(), target);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }

  // optional int32 item_level = 3;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_level(), target);
  }

  // optional int32 ripe_time = 4;
  if (has_ripe_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ripe_time(), target);
  }

  // optional int32 consume_diamonds = 5;
  if (has_consume_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->consume_diamonds(), target);
  }

  // optional int32 reward_tid = 6;
  if (has_reward_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_tid(), target);
  }

  // optional int32 unlock_level = 7;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unlock_level(), target);
  }

  // optional .Share_Common.Version version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plant_Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_index = 1;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_index());
    }

    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional int32 item_level = 3;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_level());
    }

    // optional int32 ripe_time = 4;
    if (has_ripe_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ripe_time());
    }

    // optional int32 consume_diamonds = 5;
    if (has_consume_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_diamonds());
    }

    // optional int32 reward_tid = 6;
    if (has_reward_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_tid());
    }

    // optional int32 unlock_level = 7;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_level());
    }

    // optional .Share_Common.Version version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plant_Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plant_Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plant_Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plant_Config::MergeFrom(const Plant_Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_ripe_time()) {
      set_ripe_time(from.ripe_time());
    }
    if (from.has_consume_diamonds()) {
      set_consume_diamonds(from.consume_diamonds());
    }
    if (from.has_reward_tid()) {
      set_reward_tid(from.reward_tid());
    }
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plant_Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plant_Config::CopyFrom(const Plant_Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plant_Config::IsInitialized() const {

  return true;
}

void Plant_Config::Swap(Plant_Config* other) {
  if (other != this) {
    std::swap(item_index_, other->item_index_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_level_, other->item_level_);
    std::swap(ripe_time_, other->ripe_time_);
    std::swap(consume_diamonds_, other->consume_diamonds_);
    std::swap(reward_tid_, other->reward_tid_);
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plant_Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plant_Config_descriptor_;
  metadata.reflection = Plant_Config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Account::kTypeTFieldNumber;
const int Stuff_Account::kUserNameFieldNumber;
const int Stuff_Account::kPassWordFieldNumber;
#endif  // !_MSC_VER

Stuff_Account::Stuff_Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Account::InitAsDefaultInstance() {
}

Stuff_Account::Stuff_Account(const Stuff_Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Account::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 2;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Account::~Stuff_Account() {
  SharedDtor();
}

void Stuff_Account::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Stuff_Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Account_descriptor_;
}

const Stuff_Account& Stuff_Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Account* Stuff_Account::default_instance_ = NULL;

Stuff_Account* Stuff_Account::New() const {
  return new Stuff_Account;
}

void Stuff_Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 2;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::C2S_Proto_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::C2S_Proto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PassWord;
        break;
      }

      // optional string PassWord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string PassWord = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string PassWord = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Account];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string PassWord = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Account::MergeFrom(const Stuff_Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Account::CopyFrom(const Stuff_Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Account::IsInitialized() const {

  return true;
}

void Stuff_Account::Swap(Stuff_Account* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Account_descriptor_;
  metadata.reflection = Stuff_Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_GetPlayer::kTypeTFieldNumber;
const int Stuff_GetPlayer::kUserNameFieldNumber;
const int Stuff_GetPlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Stuff_GetPlayer::Stuff_GetPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_GetPlayer::InitAsDefaultInstance() {
}

Stuff_GetPlayer::Stuff_GetPlayer(const Stuff_GetPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_GetPlayer::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 3;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_GetPlayer::~Stuff_GetPlayer() {
  SharedDtor();
}

void Stuff_GetPlayer::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Stuff_GetPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_GetPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_GetPlayer_descriptor_;
}

const Stuff_GetPlayer& Stuff_GetPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_GetPlayer* Stuff_GetPlayer::default_instance_ = NULL;

Stuff_GetPlayer* Stuff_GetPlayer::New() const {
  return new Stuff_GetPlayer;
}

void Stuff_GetPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 3;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_GetPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::C2S_Proto_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::C2S_Proto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PlayerId;
        break;
      }

      // optional int32 PlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_GetPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional int32 PlayerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_GetPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional int32 PlayerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_GetPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_GetPlayer];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional int32 PlayerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_GetPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_GetPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_GetPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_GetPlayer::MergeFrom(const Stuff_GetPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_GetPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_GetPlayer::CopyFrom(const Stuff_GetPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_GetPlayer::IsInitialized() const {

  return true;
}

void Stuff_GetPlayer::Swap(Stuff_GetPlayer* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(username_, other->username_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_GetPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_GetPlayer_descriptor_;
  metadata.reflection = Stuff_GetPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Login::kTypeTFieldNumber;
const int Stuff_Login::kAccountFieldNumber;
#endif  // !_MSC_VER

Stuff_Login::Stuff_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Login::InitAsDefaultInstance() {
  account_ = const_cast< ::Share_Common::Stuff_Account*>(&::Share_Common::Stuff_Account::default_instance());
}

Stuff_Login::Stuff_Login(const Stuff_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Login::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 4;
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Login::~Stuff_Login() {
  SharedDtor();
}

void Stuff_Login::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void Stuff_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Login_descriptor_;
}

const Stuff_Login& Stuff_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Login* Stuff_Login::default_instance_ = NULL;

Stuff_Login* Stuff_Login::New() const {
  return new Stuff_Login;
}

void Stuff_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 4;
    if (has_account()) {
      if (account_ != NULL) account_->::Share_Common::Stuff_Account::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::C2S_Proto_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::C2S_Proto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Account;
        break;
      }

      // optional .Share_Common.Stuff_Account Account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional .Share_Common.Stuff_Account Account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional .Share_Common.Stuff_Account Account = 2;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.C2S_Proto_Type type_t = 1 [default = Proto_Stuff_Login];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional .Share_Common.Stuff_Account Account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Login::MergeFrom(const Stuff_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_account()) {
      mutable_account()->::Share_Common::Stuff_Account::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Login::CopyFrom(const Stuff_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Login::IsInitialized() const {

  return true;
}

void Stuff_Login::Swap(Stuff_Login* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Login_descriptor_;
  metadata.reflection = Stuff_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Player::kTypeTFieldNumber;
const int Stuff_Player::kPlayerIdFieldNumber;
const int Stuff_Player::kPositionFieldNumber;
const int Stuff_Player::kVarietyFieldNumber;
const int Stuff_Player::kNationIdFieldNumber;
const int Stuff_Player::kMafiaIdFieldNumber;
const int Stuff_Player::kInventoryFieldNumber;
const int Stuff_Player::kLimitsFieldNumber;
#endif  // !_MSC_VER

Stuff_Player::Stuff_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Player::InitAsDefaultInstance() {
  position_ = const_cast< ::Share_Common::Stuff_Vector3*>(&::Share_Common::Stuff_Vector3::default_instance());
}

Stuff_Player::Stuff_Player(const Stuff_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Player::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 2;
  playerid_ = 0;
  position_ = NULL;
  variety_ = 2;
  nationid_ = 0;
  mafiaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Player::~Stuff_Player() {
  SharedDtor();
}

void Stuff_Player::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Stuff_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Player_descriptor_;
}

const Stuff_Player& Stuff_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Player* Stuff_Player::default_instance_ = NULL;

Stuff_Player* Stuff_Player::New() const {
  return new Stuff_Player;
}

void Stuff_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 2;
    playerid_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::Share_Common::Stuff_Vector3::Clear();
    }
    variety_ = 2;
    nationid_ = 0;
    mafiaid_ = 0;
  }
  inventory_.Clear();
  limits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::S2C_Proto_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::S2C_Proto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerId;
        break;
      }

      // required int32 PlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // optional .Share_Common.Stuff_Vector3 Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Variety;
        break;
      }

      // optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Variety:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Creature_Variety_IsValid(value)) {
            set_variety(static_cast< ::Share_Common::Creature_Variety >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NationId;
        break;
      }

      // optional int32 NationId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationid_)));
          set_has_nationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MafiaId;
        break;
      }

      // optional int32 MafiaId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MafiaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mafiaid_)));
          set_has_mafiaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Inventory;
        break;
      }

      // repeated .Share_Common.Stuff_Inventory Inventory = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inventory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Inventory;
        if (input->ExpectTag(66)) goto parse_Limits;
        break;
      }

      // repeated .Share_Common.Stuff_Limit Limits = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Limits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // required int32 PlayerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
  if (has_variety()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->variety(), output);
  }

  // optional int32 NationId = 5;
  if (has_nationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nationid(), output);
  }

  // optional int32 MafiaId = 6;
  if (has_mafiaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mafiaid(), output);
  }

  // repeated .Share_Common.Stuff_Inventory Inventory = 7;
  for (int i = 0; i < this->inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->inventory(i), output);
  }

  // repeated .Share_Common.Stuff_Limit Limits = 8;
  for (int i = 0; i < this->limits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->limits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // required int32 PlayerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
  if (has_variety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->variety(), target);
  }

  // optional int32 NationId = 5;
  if (has_nationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nationid(), target);
  }

  // optional int32 MafiaId = 6;
  if (has_mafiaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mafiaid(), target);
  }

  // repeated .Share_Common.Stuff_Inventory Inventory = 7;
  for (int i = 0; i < this->inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->inventory(i), target);
  }

  // repeated .Share_Common.Stuff_Limit Limits = 8;
  for (int i = 0; i < this->limits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->limits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Player];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // required int32 PlayerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional .Share_Common.Stuff_Vector3 Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .Share_Common.Creature_Variety Variety = 4 [default = CV_Player];
    if (has_variety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variety());
    }

    // optional int32 NationId = 5;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationid());
    }

    // optional int32 MafiaId = 6;
    if (has_mafiaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mafiaid());
    }

  }
  // repeated .Share_Common.Stuff_Inventory Inventory = 7;
  total_size += 1 * this->inventory_size();
  for (int i = 0; i < this->inventory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inventory(i));
  }

  // repeated .Share_Common.Stuff_Limit Limits = 8;
  total_size += 1 * this->limits_size();
  for (int i = 0; i < this->limits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Player::MergeFrom(const Stuff_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  inventory_.MergeFrom(from.inventory_);
  limits_.MergeFrom(from.limits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_position()) {
      mutable_position()->::Share_Common::Stuff_Vector3::MergeFrom(from.position());
    }
    if (from.has_variety()) {
      set_variety(from.variety());
    }
    if (from.has_nationid()) {
      set_nationid(from.nationid());
    }
    if (from.has_mafiaid()) {
      set_mafiaid(from.mafiaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Player::CopyFrom(const Stuff_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < inventory_size(); i++) {
    if (!this->inventory(i).IsInitialized()) return false;
  }
  return true;
}

void Stuff_Player::Swap(Stuff_Player* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(playerid_, other->playerid_);
    std::swap(position_, other->position_);
    std::swap(variety_, other->variety_);
    std::swap(nationid_, other->nationid_);
    std::swap(mafiaid_, other->mafiaid_);
    inventory_.Swap(&other->inventory_);
    limits_.Swap(&other->limits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Player_descriptor_;
  metadata.reflection = Stuff_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Players::kTypeTFieldNumber;
const int Stuff_Players::kUserNameFieldNumber;
const int Stuff_Players::kPlayersFieldNumber;
#endif  // !_MSC_VER

Stuff_Players::Stuff_Players()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Players::InitAsDefaultInstance() {
}

Stuff_Players::Stuff_Players(const Stuff_Players& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Players::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 3;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Players::~Stuff_Players() {
  SharedDtor();
}

void Stuff_Players::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Stuff_Players::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Players::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Players_descriptor_;
}

const Stuff_Players& Stuff_Players::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Players* Stuff_Players::default_instance_ = NULL;

Stuff_Players* Stuff_Players::New() const {
  return new Stuff_Players;
}

void Stuff_Players::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 3;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Players::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::S2C_Proto_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::S2C_Proto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // required string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Players;
        break;
      }

      // repeated int32 Players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_players())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_players())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Players::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // required string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // repeated int32 Players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Players::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // required string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // repeated int32 Players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Players::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.S2C_Proto_Type type_t = 1 [default = Proto_Stuff_Players];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // required string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  // repeated int32 Players = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->players(i));
    }
    total_size += 1 * this->players_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Players::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Players* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Players*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Players::MergeFrom(const Stuff_Players& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Players::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Players::CopyFrom(const Stuff_Players& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Players::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Stuff_Players::Swap(Stuff_Players* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(username_, other->username_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Players::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Players_descriptor_;
  metadata.reflection = Stuff_Players_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Limit::kLimitIdFieldNumber;
const int Stuff_Limit::kStartTimeFieldNumber;
#endif  // !_MSC_VER

Stuff_Limit::Stuff_Limit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Limit::InitAsDefaultInstance() {
}

Stuff_Limit::Stuff_Limit(const Stuff_Limit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Limit::SharedCtor() {
  _cached_size_ = 0;
  limitid_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Limit::~Stuff_Limit() {
  SharedDtor();
}

void Stuff_Limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Limit_descriptor_;
}

const Stuff_Limit& Stuff_Limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Limit* Stuff_Limit::default_instance_ = NULL;

Stuff_Limit* Stuff_Limit::New() const {
  return new Stuff_Limit;
}

void Stuff_Limit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    limitid_ = 0;
    starttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LimitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitid_)));
          set_has_limitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StartTime;
        break;
      }

      // optional int32 StartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LimitId = 1;
  if (has_limitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limitid(), output);
  }

  // optional int32 StartTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LimitId = 1;
  if (has_limitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limitid(), target);
  }

  // optional int32 StartTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Limit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LimitId = 1;
    if (has_limitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitid());
    }

    // optional int32 StartTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Limit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Limit::MergeFrom(const Stuff_Limit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limitid()) {
      set_limitid(from.limitid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Limit::CopyFrom(const Stuff_Limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Limit::IsInitialized() const {

  return true;
}

void Stuff_Limit::Swap(Stuff_Limit* other) {
  if (other != this) {
    std::swap(limitid_, other->limitid_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Limit_descriptor_;
  metadata.reflection = Stuff_Limit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Creatures::kContentsFieldNumber;
#endif  // !_MSC_VER

Stuff_Creatures::Stuff_Creatures()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Creatures::InitAsDefaultInstance() {
}

Stuff_Creatures::Stuff_Creatures(const Stuff_Creatures& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Creatures::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Creatures::~Stuff_Creatures() {
  SharedDtor();
}

void Stuff_Creatures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stuff_Creatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Creatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Creatures_descriptor_;
}

const Stuff_Creatures& Stuff_Creatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Creatures* Stuff_Creatures::default_instance_ = NULL;

Stuff_Creatures* Stuff_Creatures::New() const {
  return new Stuff_Creatures;
}

void Stuff_Creatures::Clear() {
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Creatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Share_Common.Stuff_Creature contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Creatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Share_Common.Stuff_Creature contents = 1;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Creatures::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Share_Common.Stuff_Creature contents = 1;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Creatures::ByteSize() const {
  int total_size = 0;

  // repeated .Share_Common.Stuff_Creature contents = 1;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Creatures::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Creatures* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Creatures*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Creatures::MergeFrom(const Stuff_Creatures& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Creatures::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Creatures::CopyFrom(const Stuff_Creatures& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Creatures::IsInitialized() const {

  return true;
}

void Stuff_Creatures::Swap(Stuff_Creatures* other) {
  if (other != this) {
    contents_.Swap(&other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Creatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Creatures_descriptor_;
  metadata.reflection = Stuff_Creatures_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stuff_Creature::kCreatureIdFieldNumber;
const int Stuff_Creature::kVarietyFieldNumber;
const int Stuff_Creature::kPositionFieldNumber;
#endif  // !_MSC_VER

Stuff_Creature::Stuff_Creature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stuff_Creature::InitAsDefaultInstance() {
  position_ = const_cast< ::Share_Common::Stuff_Vector3*>(&::Share_Common::Stuff_Vector3::default_instance());
}

Stuff_Creature::Stuff_Creature(const Stuff_Creature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stuff_Creature::SharedCtor() {
  _cached_size_ = 0;
  creatureid_ = 0;
  variety_ = 1;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stuff_Creature::~Stuff_Creature() {
  SharedDtor();
}

void Stuff_Creature::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Stuff_Creature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stuff_Creature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stuff_Creature_descriptor_;
}

const Stuff_Creature& Stuff_Creature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Stuff_Creature* Stuff_Creature::default_instance_ = NULL;

Stuff_Creature* Stuff_Creature::New() const {
  return new Stuff_Creature;
}

void Stuff_Creature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creatureid_ = 0;
    variety_ = 1;
    if (has_position()) {
      if (position_ != NULL) position_->::Share_Common::Stuff_Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stuff_Creature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CreatureId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatureid_)));
          set_has_creatureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Variety;
        break;
      }

      // optional .Share_Common.Creature_Variety Variety = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Variety:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Creature_Variety_IsValid(value)) {
            set_variety(static_cast< ::Share_Common::Creature_Variety >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // optional .Share_Common.Stuff_Vector3 Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stuff_Creature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CreatureId = 1;
  if (has_creatureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->creatureid(), output);
  }

  // optional .Share_Common.Creature_Variety Variety = 2;
  if (has_variety()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->variety(), output);
  }

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stuff_Creature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CreatureId = 1;
  if (has_creatureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->creatureid(), target);
  }

  // optional .Share_Common.Creature_Variety Variety = 2;
  if (has_variety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->variety(), target);
  }

  // optional .Share_Common.Stuff_Vector3 Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stuff_Creature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CreatureId = 1;
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatureid());
    }

    // optional .Share_Common.Creature_Variety Variety = 2;
    if (has_variety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variety());
    }

    // optional .Share_Common.Stuff_Vector3 Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stuff_Creature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stuff_Creature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stuff_Creature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stuff_Creature::MergeFrom(const Stuff_Creature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creatureid()) {
      set_creatureid(from.creatureid());
    }
    if (from.has_variety()) {
      set_variety(from.variety());
    }
    if (from.has_position()) {
      mutable_position()->::Share_Common::Stuff_Vector3::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stuff_Creature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stuff_Creature::CopyFrom(const Stuff_Creature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stuff_Creature::IsInitialized() const {

  return true;
}

void Stuff_Creature::Swap(Stuff_Creature* other) {
  if (other != this) {
    std::swap(creatureid_, other->creatureid_);
    std::swap(variety_, other->variety_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stuff_Creature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stuff_Creature_descriptor_;
  metadata.reflection = Stuff_Creature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Common_Property::kTIdFieldNumber;
const int Common_Property::kNameFieldNumber;
const int Common_Property::kCoolTimeFieldNumber;
const int Common_Property::kCoolTypeFieldNumber;
#endif  // !_MSC_VER

Common_Property::Common_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Common_Property::InitAsDefaultInstance() {
}

Common_Property::Common_Property(const Common_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Common_Property::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cool_time_ = 0u;
  cool_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Common_Property::~Common_Property() {
  SharedDtor();
}

void Common_Property::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Common_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Common_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Common_Property_descriptor_;
}

const Common_Property& Common_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Common_Property* Common_Property::default_instance_ = NULL;

Common_Property* Common_Property::New() const {
  return new Common_Property;
}

void Common_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    cool_time_ = 0u;
    cool_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Common_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cool_time;
        break;
      }

      // optional uint32 cool_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cool_time_)));
          set_has_cool_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cool_type;
        break;
      }

      // optional uint32 cool_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cool_type_)));
          set_has_cool_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Common_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TId = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 cool_time = 3;
  if (has_cool_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cool_time(), output);
  }

  // optional uint32 cool_type = 4;
  if (has_cool_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cool_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Common_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TId = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 cool_time = 3;
  if (has_cool_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cool_time(), target);
  }

  // optional uint32 cool_type = 4;
  if (has_cool_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cool_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Common_Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TId = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 cool_time = 3;
    if (has_cool_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cool_time());
    }

    // optional uint32 cool_type = 4;
    if (has_cool_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cool_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Common_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Common_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Common_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Common_Property::MergeFrom(const Common_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cool_time()) {
      set_cool_time(from.cool_time());
    }
    if (from.has_cool_type()) {
      set_cool_type(from.cool_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Common_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Common_Property::CopyFrom(const Common_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Common_Property::Swap(Common_Property* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(name_, other->name_);
    std::swap(cool_time_, other->cool_time_);
    std::swap(cool_type_, other->cool_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Common_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Common_Property_descriptor_;
  metadata.reflection = Common_Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_Medichine::kTypeTFieldNumber;
const int Item_Medichine::kCommFieldNumber;
const int Item_Medichine::kModeFieldNumber;
const int Item_Medichine::kTimeFieldNumber;
#endif  // !_MSC_VER

Item_Medichine::Item_Medichine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_Medichine::InitAsDefaultInstance() {
  comm_ = const_cast< ::Share_Common::Common_Property*>(&::Share_Common::Common_Property::default_instance());
}

Item_Medichine::Item_Medichine(const Item_Medichine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_Medichine::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 1;
  comm_ = NULL;
  mode_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_Medichine::~Item_Medichine() {
  SharedDtor();
}

void Item_Medichine::SharedDtor() {
  if (this != default_instance_) {
    delete comm_;
  }
}

void Item_Medichine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_Medichine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_Medichine_descriptor_;
}

const Item_Medichine& Item_Medichine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Item_Medichine* Item_Medichine::default_instance_ = NULL;

Item_Medichine* Item_Medichine::New() const {
  return new Item_Medichine;
}

void Item_Medichine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 1;
    if (has_comm()) {
      if (comm_ != NULL) comm_->::Share_Common::Common_Property::Clear();
    }
    mode_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_Medichine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Item_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::Item_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comm;
        break;
      }

      // optional .Share_Common.Common_Property comm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_Medichine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional .Share_Common.Common_Property comm = 2;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comm(), output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_Medichine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional .Share_Common.Common_Property comm = 2;
  if (has_comm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comm(), target);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_Medichine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Medichine];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional .Share_Common.Common_Property comm = 2;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comm());
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_Medichine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_Medichine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_Medichine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_Medichine::MergeFrom(const Item_Medichine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_comm()) {
      mutable_comm()->::Share_Common::Common_Property::MergeFrom(from.comm());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_Medichine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_Medichine::CopyFrom(const Item_Medichine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_Medichine::IsInitialized() const {

  if (has_comm()) {
    if (!this->comm().IsInitialized()) return false;
  }
  return true;
}

void Item_Medichine::Swap(Item_Medichine* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(comm_, other->comm_);
    std::swap(mode_, other->mode_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_Medichine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_Medichine_descriptor_;
  metadata.reflection = Item_Medichine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item_Mine::kTypeTFieldNumber;
const int Item_Mine::kModeFieldNumber;
const int Item_Mine::kTimeFieldNumber;
const int Item_Mine::kAwardsFieldNumber;
#endif  // !_MSC_VER

Item_Mine::Item_Mine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item_Mine::InitAsDefaultInstance() {
}

Item_Mine::Item_Mine(const Item_Mine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item_Mine::SharedCtor() {
  _cached_size_ = 0;
  type_t_ = 2;
  mode_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item_Mine::~Item_Mine() {
  SharedDtor();
}

void Item_Mine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item_Mine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item_Mine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_Mine_descriptor_;
}

const Item_Mine& Item_Mine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Item_Mine* Item_Mine::default_instance_ = NULL;

Item_Mine* Item_Mine::New() const {
  return new Item_Mine;
}

void Item_Mine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_t_ = 2;
    mode_ = 0;
    time_ = 0;
  }
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item_Mine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Item_Type_IsValid(value)) {
            set_type_t(static_cast< ::Share_Common::Item_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awards;
        break;
      }

      // repeated int32 awards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_awards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item_Mine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
  if (has_type_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_t(), output);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // repeated int32 awards = 4;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item_Mine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
  if (has_type_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_t(), target);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // repeated int32 awards = 4;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item_Mine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Share_Common.Item_Type type_t = 1 [default = Data_Item_Mine];
    if (has_type_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_t());
    }

    // optional int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated int32 awards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->awards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awards(i));
    }
    total_size += 1 * this->awards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item_Mine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item_Mine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item_Mine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item_Mine::MergeFrom(const Item_Mine& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_t()) {
      set_type_t(from.type_t());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item_Mine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item_Mine::CopyFrom(const Item_Mine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item_Mine::IsInitialized() const {

  return true;
}

void Item_Mine::Swap(Item_Mine* other) {
  if (other != this) {
    std::swap(type_t_, other->type_t_);
    std::swap(mode_, other->mode_);
    std::swap(time_, other->time_);
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item_Mine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_Mine_descriptor_;
  metadata.reflection = Item_Mine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Config_Path::kPathFieldNumber;
const int Config_Path::kSvnPathFieldNumber;
#endif  // !_MSC_VER

Config_Path::Config_Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config_Path::InitAsDefaultInstance() {
}

Config_Path::Config_Path(const Config_Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config_Path::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svn_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_Path::~Config_Path() {
  SharedDtor();
}

void Config_Path::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (svn_path_ != &::google::protobuf::internal::kEmptyString) {
    delete svn_path_;
  }
  if (this != default_instance_) {
  }
}

void Config_Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Path_descriptor_;
}

const Config_Path& Config_Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Config_Path* Config_Path::default_instance_ = NULL;

Config_Path* Config_Path::New() const {
  return new Config_Path;
}

void Config_Path::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_svn_path()) {
      if (svn_path_ != &::google::protobuf::internal::kEmptyString) {
        svn_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config_Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svn_path;
        break;
      }

      // optional string svn_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svn_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svn_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svn_path().data(), this->svn_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config_Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional string svn_path = 2;
  if (has_svn_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svn_path().data(), this->svn_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->svn_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config_Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string svn_path = 2;
  if (has_svn_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svn_path().data(), this->svn_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->svn_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config_Path::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string svn_path = 2;
    if (has_svn_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svn_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config_Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config_Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config_Path::MergeFrom(const Config_Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_svn_path()) {
      set_svn_path(from.svn_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config_Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_Path::CopyFrom(const Config_Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_Path::IsInitialized() const {

  return true;
}

void Config_Path::Swap(Config_Path* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(svn_path_, other->svn_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config_Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_Path_descriptor_;
  metadata.reflection = Config_Path_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Config_Common_Limit::kTIdFieldNumber;
const int Config_Common_Limit::kClearTypeFieldNumber;
const int Config_Common_Limit::kLimitTimesFieldNumber;
#endif  // !_MSC_VER

Config_Common_Limit::Config_Common_Limit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config_Common_Limit::InitAsDefaultInstance() {
}

Config_Common_Limit::Config_Common_Limit(const Config_Common_Limit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config_Common_Limit::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  clear_type_ = 1;
  limittimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_Common_Limit::~Config_Common_Limit() {
  SharedDtor();
}

void Config_Common_Limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config_Common_Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_Common_Limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Common_Limit_descriptor_;
}

const Config_Common_Limit& Config_Common_Limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Share_5fCommon_2eproto();
  return *default_instance_;
}

Config_Common_Limit* Config_Common_Limit::default_instance_ = NULL;

Config_Common_Limit* Config_Common_Limit::New() const {
  return new Config_Common_Limit;
}

void Config_Common_Limit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    clear_type_ = 1;
    limittimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config_Common_Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Clear_Type;
        break;
      }

      // optional .Share_Common.Clear_Time Clear_Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Share_Common::Clear_Time_IsValid(value)) {
            set_clear_type(static_cast< ::Share_Common::Clear_Time >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LimitTimes;
        break;
      }

      // optional int32 LimitTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limittimes_)));
          set_has_limittimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config_Common_Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TId = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional .Share_Common.Clear_Time Clear_Type = 2;
  if (has_clear_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->clear_type(), output);
  }

  // optional int32 LimitTimes = 3;
  if (has_limittimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limittimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config_Common_Limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TId = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional .Share_Common.Clear_Time Clear_Type = 2;
  if (has_clear_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->clear_type(), target);
  }

  // optional int32 LimitTimes = 3;
  if (has_limittimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limittimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config_Common_Limit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TId = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional .Share_Common.Clear_Time Clear_Type = 2;
    if (has_clear_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clear_type());
    }

    // optional int32 LimitTimes = 3;
    if (has_limittimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limittimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_Common_Limit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config_Common_Limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config_Common_Limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config_Common_Limit::MergeFrom(const Config_Common_Limit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_clear_type()) {
      set_clear_type(from.clear_type());
    }
    if (from.has_limittimes()) {
      set_limittimes(from.limittimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config_Common_Limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_Common_Limit::CopyFrom(const Config_Common_Limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_Common_Limit::IsInitialized() const {

  return true;
}

void Config_Common_Limit::Swap(Config_Common_Limit* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(clear_type_, other->clear_type_);
    std::swap(limittimes_, other->limittimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config_Common_Limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_Common_Limit_descriptor_;
  metadata.reflection = Config_Common_Limit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Share_Common

// @@protoc_insertion_point(global_scope)
